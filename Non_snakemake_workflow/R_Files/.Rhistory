phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "314" & phenotype_Data$Data_Set != "315x320"), ]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Data_Set == "315x320"),]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Extraction_Date == "03/16/23"),]
# This is to get the residuals of maternal parent while taking everything out that affects CT values
filtered_CT_model <- aov(Delta_CT ~ Harvest_Date + Standard + Extraction_Date + Extractor+ Data_Set, data = phenotype_Data)
summary(filtered_CT_model) # The filtered data
raw_CT_model <- aov(Delta_CT_OG ~ Harvest_Date + Standard + Extraction_Date + Extractor+ Data_Set, data = phenotype_Data)
summary(raw_CT_model)
alkaloid_model <- lm(ng.g ~ Harvest_Date + Extractor + Extraction_Date + Alkaloid_Plate, data = phenotype_Data)
summary(alkaloid_model)
# extreacting all the residual data and combining it together
Delta_CT_Data <- phenotype_Data[!is.na(phenotype_Data$Delta_CT), ]
Delta_CT_OG_Data <- phenotype_Data[!is.na(phenotype_Data$Delta_CT_OG), ]
Alkaloid_Data <- phenotype_Data[!is.na(phenotype_Data$ng.g), ]
filtered_CT_model <- lm(Delta_CT ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_Data)
raw_CT_model <- lm(Delta_CT_OG ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_OG_Data)
alkaloid_model <- lm(ng.g ~ Harvest_Date  + Alkaloid_Plate, data = Alkaloid_Data)
data1 <- data.frame(Delta_CT_Data$ID, filtered_CT_model$residuals)
data2 <- data.frame(Delta_CT_OG_Data$ID, raw_CT_model$residuals)
data3 <- data.frame(Alkaloid_Data$ID, alkaloid_model$residuals)
names(data1)[names(data1) == "Delta_CT_Data.ID"] <- "ID"
names(data2)[names(data2) == "Delta_CT_OG_Data.ID"] <- "ID"
names(data3)[names(data3) == "Alkaloid_Data.ID"] <- "ID"
residual_data <- merge(data1, data2, by = "ID", all = TRUE)
residual_data <- merge(residual_data, data3, by = "ID", all = TRUE)
# This data set is your final phenotype data
######################
residual_data
######################
plot(residual_data$filtered_CT_model.residuals)
plot(residual_data$raw_CT_model.residuals)
plot(residual_data$alkaloid_model.residuals)
#Using the OG CP values (not efficiency adjusted)
plot2 <- ggplot(all_Data, aes(x=Delta_CT_OG, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white" +
ggtitle("Fescue - Epichloe CT Values by qpcr Plate") +
ylab("Delta CT of Fescue - Epichloe") +
xlab("Sample Number"))
#Using the OG CP values (not efficiency adjusted)
plot2 <- ggplot(all_Data, aes(x=Delta_CT_OG, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white" +
ggtitle("Fescue - Epichloe CT Values by qpcr Plate"), +
ylab("Delta CT of Fescue - Epichloe"), +
xlab("Sample Number"))
#Using the OG CP values (not efficiency adjusted)
plot2 <- ggplot(all_Data, aes(x=Delta_CT_OG, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white" +
ggtitle("Fescue - Epichloe CT Values by qpcr Plate") + ylab("Delta CT of Fescue - Epichloe") +
xlab("Sample Number"))
#Using the OG CP values (not efficiency adjusted)
plot2 <- ggplot(all_Data, aes(x=Delta_CT_OG, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white") +
ggtitle("Fescue - Epichloe CT Values by qpcr Plate") + ylab("Delta CT of Fescue - Epichloe") +
xlab("Sample Number")
ggarrange(plot2, plot1, ncol = 1, nrow = 2)
#Using the OG CP values (not efficiency adjusted)
plot2 <- ggplot(all_Data, aes(x=Delta_CT_OG, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white")
ggarrange(plot2, plot1, ncol = 1, nrow = 2)
################################################################################
# Gathering Residual Data
################################################################################
# getting rid of out liar data
#plots will show us which data pints to turn into NAs
plot(phenotype_Data$Delta_CT_OG, col = as.factor(phenotype_Data$Extraction_Date))
raw_CT_model <- aov(Delta_CT_OG ~ Harvest_Date + Standard + Extraction_Date + Extractor+ Data_Set, data = phenotype_Data)
################################################################################
# Gathering Residual Data
################################################################################
# getting rid of out liar data
#plots will show us which data pints to turn into NAs
plot(phenotype_Data$Delta_CT_OG, col = as.factor(phenotype_Data$Extraction_Date))
# Merging all data together with MetaData
################################################################################
# Merging the data alkaloid and CT data together
CT_Values <- subset(all_Data, select = c(Treatment, Data_Set, Delta_CT, Delta_CT_OG, Fes_to_Epi_Ratio, Standard, Maternal_Parent))
colnames(CT_Values)[colnames(CT_Values) == "Treatment"] ="ID"
phenotype_Data <- merge(CT_Values, alklaoid, by.x = c("ID", "Maternal_Parent"), by.y = c("ID", "Maternal_Parent" ) ,all = TRUE)
colnames(phenotype_Data)[colnames(phenotype_Data) == "Plate"] ="Alkaloid_Plate"
phenotype_Data$Maternal_Parent <- as.character(phenotype_Data$Maternal_Parent)
# adding the metadata and merging it with the phenotype data
extraction_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/Phenotype_Data/Meta_Data/Extraction_info.csv"
harvest_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/Phenotype_Data/Meta_Data/Harvest_Info.csv"
extraction <- read.csv(extraction_loc, header = TRUE, strip.white=TRUE)
harvest <- read.csv(harvest_loc, header = TRUE, strip.white=TRUE)
metadata <- merge(extraction, harvest, by.x = c("ID"), by.y = c("ID"), all = TRUE)
phenotype_Data <- merge(phenotype_Data, metadata, by = c("ID"))
phenotype_Data$Alkaloid_Plate <- as.character(phenotype_Data$Alkaloid_Plate)
# Saving the data to make a phenotype file
phenotype_Data$ng.g <- round(phenotype_Data$ng.g, 3)
write.table(phenotype_Data, file = "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt", row.names = FALSE)
################################################################################
# Gathering Residual Data
################################################################################
# getting rid of out liar data
#plots will show us which data pints to turn into NAs
plot(phenotype_Data$Delta_CT_OG, col = as.factor(phenotype_Data$Extraction_Date))
phenotype_Data$Delta_CT[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "314" & phenotype_Data$Data_Set != "315x320"), ]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Data_Set == "315x320"),]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Extraction_Date == "03/16/23"),]
# This is to get the residuals of maternal parent while taking everything out that affects CT values
filtered_CT_model <- aov(Delta_CT ~ Harvest_Date + Standard + Extraction_Date + Extractor+ Data_Set, data = phenotype_Data)
summary(filtered_CT_model) # The filtered data
raw_CT_model <- aov(Delta_CT_OG ~ Harvest_Date + Standard + Extraction_Date + Extractor+ Data_Set, data = phenotype_Data)
summary(raw_CT_model)
alkaloid_model <- lm(ng.g ~ Harvest_Date + Extractor + Extraction_Date + Alkaloid_Plate, data = phenotype_Data)
summary(alkaloid_model)
# extreacting all the residual data and combining it together
Delta_CT_Data <- phenotype_Data[!is.na(phenotype_Data$Delta_CT), ]
Delta_CT_OG_Data <- phenotype_Data[!is.na(phenotype_Data$Delta_CT_OG), ]
Alkaloid_Data <- phenotype_Data[!is.na(phenotype_Data$ng.g), ]
filtered_CT_model <- lm(Delta_CT ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_Data)
raw_CT_model <- lm(Delta_CT_OG ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_OG_Data)
alkaloid_model <- lm(ng.g ~ Harvest_Date  + Alkaloid_Plate, data = Alkaloid_Data)
data1 <- data.frame(Delta_CT_Data$ID, filtered_CT_model$residuals)
data2 <- data.frame(Delta_CT_OG_Data$ID, raw_CT_model$residuals)
data3 <- data.frame(Alkaloid_Data$ID, alkaloid_model$residuals)
names(data1)[names(data1) == "Delta_CT_Data.ID"] <- "ID"
names(data2)[names(data2) == "Delta_CT_OG_Data.ID"] <- "ID"
names(data3)[names(data3) == "Alkaloid_Data.ID"] <- "ID"
residual_data <- merge(data1, data2, by = "ID", all = TRUE)
residual_data <- merge(residual_data, data3, by = "ID", all = TRUE)
# This data set is your final phenotype data
######################
residual_data
######################
plot(residual_data$filtered_CT_model.residuals)
plot(residual_data$raw_CT_model.residuals)
plot(residual_data$alkaloid_model.residuals)
View(phenotype_Data)
######################
plot(residual_data$filtered_CT_model.residuals)
View(residual_data)
ggplot(residual_data_M_2, aes(x=Maternal_Parent, y=alkaloid_model.residuals, fill = Maternal_Parent, group=Maternal_Parent)) +
geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) +
theme_bw() +
xlab("Plant Lines") +
ylab("Alkaloid Residuals") +
scale_fill_discrete(name = "Plant Lines") +
geom_text(data = Tk, aes(label = cld, x = Maternal_Parent, y = quant),
vjust = -1.3, hjust = 1.1, size = 5)
# no filtering analysis
################################################################################
#load in CT data
ct_data_raw <- merge(Data_g3p4_Means_all,Data_2x2_Means_all, by.x = c("Treatment", "Data_Set"), by.y = c("Treatment", "Data_Set"))
names(ct_data_raw)[names(ct_data_raw) == "MeanCP.x"] <- "CP_Fescue"
names(ct_data_raw)[names(ct_data_raw) == "MeanCP.y"] <- "CP_Epichloe"
names(ct_data_raw)[names(ct_data_raw) == "Treatment"] <- "ID"
ct_data_raw[c('Maternal_Parent', 'DeleteMe')] <- str_split_fixed(ct_data_raw$ID, '-', 2)
ct_data_raw <- subset(ct_data_raw, select = -c(DeleteMe))
ct_data_raw$DeltaCT_Raw <- ct_data_raw$CP_Fescue - ct_data_raw$CP_Epichloe
# loading in alkaloid data
alklaoid_raw <- read.csv(alklaoid_loc, header = TRUE, strip.white=TRUE)
alklaoid_raw[c('Maternal_Parent', 'DeleteMe')] <- str_split_fixed(alklaoid_raw$ID, '-', 2)
alklaoid_raw <- subset(alklaoid_raw, select = -c(DeleteMe))
alklaoid_raw$Plate <- as.character(alklaoid_raw$Plate)
names(alklaoid_raw)[names(alklaoid_raw) == "Plate"] <- "Alkaloid_Plate"
# Merge all data together
phenotype_Data_raw <- merge(ct_data_raw, alklaoid_raw, by.x = c("ID", "Maternal_Parent"), by.y = c("ID", "Maternal_Parent") ,all = TRUE)
phenotype_Data_raw <- merge(phenotype_Data_raw, metadata, by.x = c("ID"), by.y = c("ID") ,all = TRUE)
phenotype_Data_raw <- merge(phenotype_Data_raw,standard_group, by.x = c("Data_Set"), by.y =c("Data_Set"), all =  TRUE)
# Plots comparing raw to unraw (no outliar removal and no efficiency adjustements)
rawscatter <- ggplot(phenotype_Data_raw, aes(x = DeltaCT_Raw, y = ng.g, color = Maternal_Parent)) +
geom_point()
cleanscatter <- ggplot(phenotype_Data, aes(x = Delta_CT, y = ng.g, color = Maternal_Parent)) +
geom_point()
ggarrange(rawscatter,
cleanscatter,
nrow = 2,
ncol = 1)
# Extracting residuals and putting them all together
Delta_CT_Data_raw <- phenotype_Data_raw[!is.na(phenotype_Data_raw$DeltaCT_Raw), ]
Alkaloid_Data_raw <- phenotype_Data_raw[!is.na(phenotype_Data_raw$ng.g), ]
CT_model_raw <- lm(DeltaCT_Raw ~ Harvest_Date + Standard + Extraction_Date + Extractor + Data_Set, data = Delta_CT_Data_raw)
alkaloid_model_raw <- lm(ng.g ~ Harvest_Date  + Alkaloid_Plate, data = Alkaloid_Data_raw)
data4 <- data.frame(Delta_CT_Data_raw$ID, CT_model_raw$residuals)
data5 <- data.frame(Alkaloid_Data_raw$ID, alkaloid_model_raw$residuals)
nrow(Alkaloid_Data_raw)
length(alkaloid_model_raw$residuals)
names(data4)[names(data4) == "Delta_CT_Data_raw.ID"] <- "ID"
names(data5)[names(data5) == "Alkaloid_Data_raw.ID"] <- "ID"
residual_data_raw <- merge(data4, data5, by = "ID", all = TRUE)
################################################################################
# making graphs to compare residual raw vs residual filterd
################################################################################
metadata <- subset(phenotype_Data, select = c("ID", "Maternal_Parent", "Alkaloid_Plate", "Extraction_Date", "Extractor", "Data_Set", "Standard", "Harvest_Date") )
residual_data_M <- merge(residual_data, metadata, by="ID")
residual_data_raw_M <- merge(residual_data_raw, metadata, by="ID")
# Scatter plot of delta CT residuals
CT_Data <- ggplot(residual_data_M, aes(x=ID, y=filtered_CT_model.residuals)) +
geom_point() +
ylim(-5,5) +
theme(axis.text.x = element_blank()) +
labs(title = "Efficiency filtered CT values",
x = "ID",
y = "Delta CT")
CT_Data_raw <- ggplot(residual_data_raw_M, aes(x=ID, y=CT_model_raw.residuals)) +
geom_point() +
ylim(-5,5) +
theme(axis.text.x = element_blank()) +
labs(title = "Raw Data",
x = "ID",
y = "Delta CT")
ggarrange(CT_Data, CT_Data_raw, ncol = 1, nrow = 2)
# Histogram plot of delta CT residuals
plot1 <- ggplot(residual_data_M, aes(x=filtered_CT_model.residuals)) +
geom_histogram(bins = 60, fill = "blue", color = "black") +
ylim(0,250) +
xlim(-8,8) +
labs(title = "Efficiency filtered CT values",
x = "Delta CT Residuals",
y = "Frequency")
plot2 <- ggplot(residual_data_M, aes(x=raw_CT_model.residuals)) +
geom_histogram(bins = 60, fill = "green", color = "black") +
ylim(0,250) +
xlim(-8,8) +
labs(title = "filtered raw CT values",
x = "Delta CT Residuals",
y = "Frequency")
plot3 <- ggplot(residual_data_raw_M, aes(x=CT_model_raw.residuals)) +
geom_histogram(bins = 60, fill = "red", color = "black") +
ylim(0,250) +
xlim(-8,8) +
labs(title = "Unfiltered raw CT values",
x = "Delta CT Residuals",
y = "Frequency")
ggarrange(plot1, plot2, plot3, ncol = 1, nrow = 3)
# Histogram plot of alkaloid residuals
plot2 <- ggplot(residual_data, aes(x=alkaloid_model.residuals)) +
geom_histogram(bins = 60, fill = "blue", color = "black") +
labs(title = "Filtered alkaloid values",
x = "ng per gram",
y = "Frequency")
plot3 <- ggplot(residual_data_raw, aes(x=alkaloid_model_raw.residuals)) +
geom_histogram(bins = 60, fill = "red", color = "black") +
labs(title = "Unfiltered raw alkaloid values",
x = "ng per gram",
y = "Frequency")
ggarrange(plot2, plot3, ncol = 1, nrow = 2)
# Scatter plot to see if we have groupings of stuff
plot5 <- ggplot(residual_data_M, aes(x=Data_Set, y=filtered_CT_model.residuals, color=Data_Set)) +
geom_point() +
theme(axis.text.x = element_blank()) +
labs(title = "Efficiency Filtered Delta CT Values",
x = "ID",
y = "Delta CT")
plot6 <- ggplot(residual_data_M, aes(x=Data_Set, y=raw_CT_model.residuals, color=Data_Set)) +
geom_point() +
theme(axis.text.x = element_blank()) +
labs(title = "Filtered Raw Delta CT Values",
x = "ID",
y = "Delta CT")
plot7 <- ggplot(residual_data_raw_M, aes(x=Data_Set, y=CT_model_raw.residuals, color=Data_Set)) +
geom_point() +
labs(title = "Unfiltered Delta CT Values",
x = "ID",
y = "Delta CT")
ggarrange(plot5, plot6, plot7, ncol = 1, nrow = 3)
# scatterplot plot of alkaloid residuals
plot7 <- ggplot(residual_data_M, aes(x=Alkaloid_Plate, y=alkaloid_model.residuals, color=Alkaloid_Plate)) +
geom_point() +
labs(title = "Filtered Alkaloid Values",
x = "ID",
y = "ng/g")
plot8 <- ggplot(residual_data_raw_M, aes(x=Alkaloid_Plate, y=alkaloid_model_raw.residuals, color=Alkaloid_Plate)) +
geom_point() +
labs(title = "Unfiltered Alkaloid Values",
x = "ID",
y = "ng/g")
ggarrange(plot7, plot8, ncol = 1, nrow = 2)
################################################################################
# Making graphs more usefull for presentations, with residuals
################################################################################
write.table(residual_data_M, file = "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/Phenotype_Data/All_Data_Filtered/residual_data.txt", row.names = FALSE)
# is the residual data linearly related
plot(residual_data$filtered_CT_model.residuals, residual_data$alkaloid_model.residuals) # fuck no
# Make the above graph just better
model <- lm(filtered_CT_model.residuals ~ alkaloid_model.residuals, data = residual_data_M)
# Extract the R-squared value
rsquared <- summary(model)$r.squared
# Create a scatter plot
ggplot(residual_data_M, aes(x = alkaloid_model.residuals, y = filtered_CT_model.residuals, color = Maternal_Parent)) +
geom_point() +
annotate("text", x = -12000, y = 2.4, label = paste("R-squared =", round(rsquared, 3))) +
theme_bw() +
labs(title = "Scatter Plot with R-squared Value",
x = "Alkaloid Residuals",
y = "Delta CT Residuals")
## THis next plot looks at the non residual data
# Make the above graph just better
model <- lm(Delta_CT ~ ng.g, data = phenotype_Data)
# Extract the R-squared value
rsquared <- summary(model)$r.squared
# Create a scatter plot
ggplot(phenotype_Data, aes(x = ng.g, y = Delta_CT)) +
geom_point() +
annotate("text", x = 35000, y = 5, label = paste("R-squared =", round(rsquared, 3))) +
labs(title = "Scatter Plot with R-squared Value",
x = "Alkaloid Residuals",
y = "Delta CT Residuals")
# Showing us getting rid of terrible batch effects.
#Using the OG CP values (not efficiency adjusted)
plot1 <- ggplot(all_Data, aes(x=Delta_CT, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white")
plot2 <- ggplot(residual_data_M, aes(x=filtered_CT_model.residuals, color=Data_Set)) +
geom_histogram(binwidth=.2, fill = "white") +
xlab("Delta CT Residuals")
ggarrange(plot1, plot2, ncol = 1, nrow = 2)
# Showing Box plots by maternal parent
residual_data_M$Maternal_Parent <- as.factor(residual_data_M$Maternal_Parent)
removeems <- c("311","318","319")
residual_data_M_2 <- subset(residual_data_M, !(Maternal_Parent %in% removeems))
# Getting the letters for the plots
anova <- aov(alkaloid_model.residuals ~ Maternal_Parent, data = residual_data_M_2)
summary(anova)
tukey <- TukeyHSD(anova)
print(tukey)
Tk <- group_by(residual_data_M_2, Maternal_Parent) %>%
summarise(mean=mean(alkaloid_model.residuals), quant = quantile(alkaloid_model.residuals, probs = .75, na.rm = TRUE)) %>%
arrange(desc(mean))
cld <- multcompLetters4(anova, tukey) #forgot why we do this
print(cld)
cld <- as.data.frame.list(cld$Maternal_Parent)
Tk$cld <- cld$Letters
print(Tk)
### Making Boxplot ###
ggplot(residual_data_M_2, aes(x=Maternal_Parent, y=alkaloid_model.residuals, fill = Maternal_Parent, group=Maternal_Parent)) +
geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) +
theme_bw() +
xlab("Plant Lines") +
ylab("Alkaloid Residuals") +
scale_fill_discrete(name = "Plant Lines") +
geom_text(data = Tk, aes(label = cld, x = Maternal_Parent, y = quant),
vjust = -1.3, hjust = 1.1, size = 5)
# Getting the letters for the plots
anova <- aov(filtered_CT_model.residuals ~ Maternal_Parent, data = residual_data_M_2)
summary(anova)
tukey <- TukeyHSD(anova)
print(tukey)
Tk <- group_by(residual_data_M_2, Maternal_Parent) %>%
summarise(mean=mean(filtered_CT_model.residuals), quant = quantile(filtered_CT_model.residuals, probs = .75, na.rm = TRUE)) %>%
arrange(desc(mean))
cld <- multcompLetters4(anova, tukey) #forgot why we do this
print(cld)
cld <- as.data.frame.list(cld$Maternal_Parent)
Tk$cld <- cld$Letters
print(Tk)
ggplot(residual_data_M_2, aes(x=Maternal_Parent, y=filtered_CT_model.residuals, fill = Maternal_Parent, group=Maternal_Parent)) +
geom_boxplot(outlier.colour="red", outlier.shape=8, outlier.size=4) +
theme_bw() +
xlab("Plant Lines") +
ylab("Delta CT residuals") +
scale_fill_discrete(name = "Plant Lines") +
geom_text(data = Tk, aes(label = cld, x = Maternal_Parent, y = quant),
vjust = -1.3, hjust = 1.1, size = 5)
# Objective: This script evaluates how normal my allel frequencies are
# Below are some basic info on the 320 x 315 cross
# The parents will dictate the percent chance of a success based on mendalian genetics
# The progeny are the number of succeses
# total number of progeny is 188
library(tidyverse)
library(reshape2)
library(tidyr)
# Load in data
allel_freq_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/VCF/haplotypes/Haplotype_Eval_Data/allel_frequencies.csv"
allel_freq <- read.csv(allel_freq_loc, header = TRUE, strip.white=TRUE)
beagle_vs_vcf_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/VCF/haplotypes/Haplotype_Eval_Data/beagle_vs_vcf.csv"
beagle_vs_vcf <- read.csv(beagle_vs_vcf_loc, header = TRUE, strip.white=TRUE)
genotype_depth_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/VCF/haplotypes/Haplotype_Eval_Data/genotype_depth.csv"
genotype_depth <- read.csv(genotype_depth_loc, header = FALSE, strip.white=TRUE)
prog_counts_loc <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/VCF/haplotypes/Haplotype_Eval_Data/Homo_Hetero_Numbers.csv"
prog_count <- read.csv(prog_counts_loc, header = TRUE, strip.white=TRUE)
# Save locations
pseudo_testcrosses_save <- "/home/drt06/Documents/Tall_fescue/Mapping_and_QTL/Mapping_and_QTL/Data/Real_Data/VCF/haplotypes/Haplotype_Eval_Data/psedotest_cross_list.txt"
#Fixing the number labels
allel_freq$X <- allel_freq$X +1
# Separate the ones and zeroes on the parent side from the other data
allel_freq_1_0 <- allel_freq[allel_freq$Parents %in% c(0, 1), ]
allel_freq_not_100 <- allel_freq[allel_freq$Parents %in% c(.25, .75, .5), ]
print(nrow(allel_freq_1_0) + nrow(allel_freq_not_100))
nrow(allel_freq)
# Creating a column for the CDF
allel_freq_not_100$binom <- pbinom(allel_freq_not_100$Progeny, size=188, prob=allel_freq_not_100$Parents)
pbinom(47, size=188, .25)
pbinom(94, size=188, .5)
pbinom(141, size=188, .75)
# Making a progeny frequncy column
allel_freq$prog_freq <- allel_freq$Progeny/188
allel_freq_not_100 <- allel_freq_not_100 %>%
mutate(binom2sided = ifelse(binom > 0.5, (1- binom)*2, binom*2))
################################################################################
### Working with progeny counts to find test crosses
################################################################################
head(prog_count)
prog_count$Het1_percent <- prog_count$Het1 / (94-prog_count$Missing)
prog_count$Het2_percent <- prog_count$Het2 / (94-prog_count$Missing)
prog_count$Homo1_percent <- prog_count$Homo1 / (94-prog_count$Missing)
prog_count$Homo2_percent <- prog_count$Homo2 / (94-prog_count$Missing)
prog_percents <- subset(prog_count, select = c ('ID', 'Het1_percent','Het2_percent','Homo1_percent','Homo2_percent'))
head(prog_percents)
cross_type <- data.frame(ID = character(length = nrow(prog_percents)))
cross_type$ID <- prog_percents$ID
# This loops tests the percents of progeny outcomes in each site and if they match
# with an expected percent from a cross it will add that site to the predicted cross
# This is to clear the lists before the loop is run
for (x in 1:1){
tolerance <- .08
no_hits <- 0
PureHomo0 <- list()
PureHomo1 <- list()
PureHetero <- list()
Half_het_homo0 <- list()
Half_het_homo1 <- list()
HalfHomo0_HalfHomo1 <- list()
No_Hit <- list()
for (row in 1:nrow(prog_percents)){
Het <- prog_percents$Het1_percent[row]
Homo0 <- prog_percents$Homo1_percent[row]
Homo1 <- prog_percents$Homo2_percent[row]
Site <- prog_percents$ID[row]
print(Site)
# Half hetero with homo 0|0 parents #1
if (Het >= (0.5 - tolerance) & Het <= (0.5 + tolerance) & Homo0 >= (0.5 - tolerance) & Homo0 <= (0.5 + tolerance) ){
Half_het_homo0 <- c(Half_het_homo0, paste(Site, row))
print("HIT Half_het_homo0!")
} # Half hetero with homo 1|1 parents #2
else if (Het >= (0.5 - tolerance) & Het <= (0.5 + tolerance) & Homo1 >= (0.5 - tolerance) & Homo1 <= (0.5 + tolerance) ){
Half_het_homo1 <- c(Half_het_homo1, paste(Site, row))
print("HIT Half_het_homo1!")
}# All Homo 0|0 parents #3
else if (Homo0 >= (1 - tolerance) & Homo0 <= (1 + tolerance)){
PureHomo0 <- c(PureHomo0, paste(Site, row))
print("HIT PureHomo0!")
}# All Homo 1|1 parents #4
else if (Homo1 >= (1 - tolerance) & Homo1 <= (1 + tolerance)){
PureHomo1 <- c(PureHomo1, paste(Site, row))
print("HIT PureHomo1!")
} # All Hetero parents #5
else if (Het >= (0.5 - tolerance) & Het <= (0.5 + tolerance) & Homo0 >= (0.25 - tolerance) & Homo0 <= (0.25 + tolerance) & Homo1 >= (0.25 - tolerance) & Homo1 <= (0.25 + tolerance)){
PureHetero <- c(PureHetero, paste(Site, row))
print("HIT PureHetero!")
} # Half Homo1 Half Homo2 parents
else if (Homo0 == (0.5 - tolerance) & Homo1 == (0.5 - tolerance)){
HalfHomo0_HalfHomo1 <- c(HalfHomo0_HalfHomo1, paste(Site, row))
print("HIT HalfHomo0_HalfHomo1!")
}
else{
no_hits = no_hits + 1
cat("no hit", no_hits, "\n")
No_Hit <- c(No_Hit, paste(Site, row))
}
}
}
# Grabbing the pseudo test cross and exporting it
Half_het_homo0_df <- as.data.frame(t(Half_het_homo0))
Half_het_homo0_df <- as.vector(t(Half_het_homo0_df))
Half_het_homo1_df <- as.data.frame(t(Half_het_homo1))
Half_het_homo1_df <- as.vector(t(Half_het_homo1_df))
pseudo_testcrosses <- as.data.frame(rbind(Half_het_homo0_df, Half_het_homo1_df))
pseudo_testcrosses$V1 <- as.character(pseudo_testcrosses$V1)
pseudo_testcrosses <- separate(pseudo_testcrosses, V1, into = c("V1", "Number"), sep = "\\ ")
pseudo_testcrosses <- separate(pseudo_testcrosses, V1, into = c("CHROM", "POS"), sep = "l")
pseudo_testcrosses$CHROM <- paste0(pseudo_testcrosses$CHROM, "l")
pseudo_testcrosses <- subset(pseudo_testcrosses, select = -c(Number))
write.table(pseudo_testcrosses, pseudo_testcrosses_save, sep = "\t", quote = FALSE, row.names = FALSE, col.names = FALSE)
# Creating a data frame for the results
chi_squared_results <- data.frame(ID = character(length = nrow(prog_percents)))
chi_squared_results$ID <- prog_percents$ID
chi_squared_results$Half_het_homo1 <- NA
chi_squared_results$Half_het_homo2 <- NA
# Extracting data for test
chi_squared_data <- subset(prog_percents, select = c(Het1_percent,Homo1_percent,Homo2_percent))
# creating a function to do a chi squared test on each row.
# It looks for a specific distribution
perform_chi_squared_test0 <- function(row) {
expected_distribution <- c(0.475, 0.475, 0.05)
chi_squared_result <- chisq.test(row, p = expected_distribution)
return(chi_squared_result$p.value)
}
perform_chi_squared_test1 <- function(row) {
expected_distribution <- c(0.475, 0.05, 0.475)
chi_squared_result <- chisq.test(row, p = expected_distribution)
return(chi_squared_result$p.value)
}
p_values_test0 <- apply(chi_squared_data, 1, perform_chi_squared_test0)
p_values_test1 <- apply(chi_squared_data, 1, perform_chi_squared_test1)
chi_squared_results$Half_het_homo1 <- round(p_values_test0, digits = 4)
chi_squared_results$Half_het_homo2 <- round(p_values_test1, digits = 4)
expected_distribution <- c(0.475, 0.475, 0.05)
simudata <- data.frame(.50,.50,.0)
simudata <- data.frame(.50,.0,.50)
simudata <- data.frame(0,1,.0)
simudata <- data.frame(0,0,1)
simudata <- data.frame(.25,.50,.25)
simudata <- data.frame(.30,.10,.60)
chi_squared_result <- chisq.test(simudata, p = expected_distribution)
chi_squared_result$p.value
################################################################################
###  Making graphs
################################################################################
ggplot(allel_freq_not_100, aes(x=binom)) +
geom_histogram(bins = 50) +
labs(x = "Cumulative Distibution", y = "Count")
# This plot shows the results of a 2 sided bionomial distibution test
ggplot(allel_freq_not_100, aes(x=binom2sided)) +
geom_histogram(bins = 50) +
labs(x = "Cumulative Distibution", y = "Count")
