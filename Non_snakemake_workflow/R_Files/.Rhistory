# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
pca_result <- prcomp(kinship_matrix)
diag(kinship_matrix) <- NA
kin_heatmap <- pheatmap(kinship_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
main = paste0("Kinship Matrix Heatmap ", title))
# Perform PCA on the kinship matrix (or SNP matrix if needed)
pca_scores <- pca_result$x  # Principal component scores
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_df <- data.frame(PC1 = pca_scores[, 1], PC2 = pca_scores[, 2])
pca_df <-merge(pca_df, cross_list, by.x = "row.names", by.y = "V1" )
# Create the scatter plot of PC1 vs PC2
kin_pca <- ggplot(pca_df, aes(x = PC1, y = PC2)) +
geom_point(aes(color = V2), size = 3, alpha = 0.3) +  # Plot the points
geom_text(
data = subset(pca_df, grepl("parent", V2, ignore.case = TRUE)),  # Filter for "parent"
aes(label = Row.names),
vjust = -1,  # Adjust text position
size = 3,
color = "black"
) +
labs(title = paste0("PCA:", title), x = "PC1", y = "PC2") +
theme_minimal()
return(list(plot1 = kin_heatmap, plot2 = kin_pca))
}
plots_star_23 <- base_kin_analysis(Residual_Data_23_outliars_rm, geno_matrix, cross_list, title = "Star Cross 2023")
################ Functions needed for heritability finding #####################
##### Function to convert genotype into something usable ####
convert_genotypes <- function(geno) {
geno <- gsub("0/0", "0", geno)
geno <- gsub("0/1", "1", geno)
geno <- gsub("1/1", "2", geno)
return(as.numeric(geno))
}
###### Getting Heritabilities function ######
find_heritability <- function(pheno_data, geno_matrix, trait) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
# Summarize model results
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
cat("\n ###### check for convergance ######\n")
if (model$convergence) {
print("Model converged successfully.")
} else {
print("Model failed to converge.")
}
# Extract variance components for heritability calculation
var_ID <- varcomp_summary$VarComp[1]  # Genetic variance
var_residual <- varcomp_summary$VarComp[2]  # Residual variance
# Calculate heritability
heritability <- var_ID / (var_ID + var_residual)
# Return heritability estimate
heritability <- round(heritability, 4)
resultstable <- data.table(
H = heritability,
GeneticVar = var_ID,
ResidualVar = var_residual,
N = model_summary$groups[1]
)
return(resultstable)
}
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65, Hmin = .03) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability >= Hmin && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
cat("Heritability could not get into acceptable range, returning last results table\n")
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
graph_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 14, Hdif = .04) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
heritability_old = 100
N_list <- c()
H_list <- c()
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
heritability_dif <- abs(heritability - heritability_old)
# Append the current N and H values
N_list <- c(N_list, nrow(pheno_data))
H_list <- c(H_list, heritability)
cat("\n ######################## \n")
cat("N_list new value ", N_list, "\n")
cat("H_list new value ", H_list, "\n")
# if (heritability_dif <= Hdif && heritability != 0) {
#   cat("Heritability difference is ",heritability_dif," which is acceptable. Returning results.\n")
#   # Add removed individuals to the results
#   results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
#
#   # Remove and calculate 2 more before finishing.
#   cat("Removing one more before finishing \n")
#   mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
#   abs_diff <- abs(pheno_data[[trait]] - mean_trait)
#   furthest_index <- which.max(abs_diff)
#   cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
#   removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
#   pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
#   heritability_old <- results$H[1]
#   removals <- removals + 1
#   results <- find_heritability(pheno_data, geno_matrix, trait)
#   heritability <- results$H[1]  # Extract heritability
#   heritability_dif <- abs(heritability - heritability_old)
#   # Append the current N and H values
#   N_list <- c(N_list, nrow(pheno_data))
#   H_list <- c(H_list, heritability)
#
#   # Graphing the final product
#   data <- data.frame(N = N_list, H = H_list)
#   H_plot <- ggplot(data, aes(x = N, y = H)) +
#     geom_point(color = "blue", size = 3) +  # Add points
#     geom_line(color = "red") +             # Add a line connecting the points
#     labs(title = "N vs Heritability",
#          x = "N",
#          y = "Heritability") +
#     theme_bw()
#
#   return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
#
# }
# Remove the furthest point from the mean
cat("Heritability difference is ",heritability_dif," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
heritability_old <- results$H[1]      # Update old heritability
removals <- removals + 1
}
# Add removed individuals to the results
# Graphing the final product
data <- data.frame(N = N_list, H = H_list)
H_plot <- ggplot(data, aes(x = N, y = H)) +
geom_point(color = "blue", size = 3) +  # Add points
geom_line(color = "red") +             # Add a line connecting the points
labs(title = "N vs Heritability",
x = "N",
y = "Heritability") +
theme_bw()
return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
}
plot_avg_310_alk <- graph_heritability(Residual_data_avg_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res", nrow(Residual_data_avg_outliars_rm_314x310)/2, .04)
base_kin_analysis <- function(pheno_data, geno_matrix, cross_list, title) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
pca_result <- prcomp(kinship_matrix)
diag(kinship_matrix) <- NA
kin_heatmap <- pheatmap(kinship_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
main = paste0("Kinship Matrix Heatmap ", title))
# Perform PCA on the kinship matrix (or SNP matrix if needed)
pca_scores <- pca_result$x  # Principal component scores
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_df <- data.frame(PC1 = pca_scores[, 1], PC2 = pca_scores[, 2])
pca_df <-merge(pca_df, cross_list, by.x = "row.names", by.y = "V1" )
# Create the scatter plot of PC1 vs PC2
kin_pca <- ggplot(pca_df, aes(x = PC1, y = PC2)) +
geom_point(aes(color = V2), size = 3, alpha = 0.3) +  # Plot the points
geom_text(
data = subset(pca_df, grepl("parent", V2, ignore.case = TRUE)),  # Filter for "parent"
aes(label = Row.names),
vjust = -1,  # Adjust text position
size = 3,
color = "black"
) +
labs(title = paste0("PCA:", title), x = "PC1", y = "PC2") +
theme_minimal()
return(list(plot1 = kin_heatmap, plot2 = kin_pca))
}
plots_star_23 <- base_kin_analysis(Residual_Data_23_outliars_rm, geno_matrix, cross_list, title = "Star Cross 2023")
plots_star_23$plot2
plots_314x310_23 <- base_kin_analysis(Residual_Data_23_outliars_rm_314x310, geno_matrix, cross_list, title = "314x310 2023")
plots_314x310_23$plot2
plots_314x312_23 <- base_kin_analysis(Residual_Data_23_outliars_rm_314x312, geno_matrix, cross_list, title = "314x312 2023")
plots_314x312_23$plot2
plots_star_avg <- base_kin_analysis(Residual_data_avg_outliars_rm, geno_matrix, cross_list, title = "Star Cross Years Avraged")
plots_314x310_avg <- base_kin_analysis(Residual_data_avg_outliars_rm_314x310, geno_matrix, cross_list, title = "314x310 Years Avraged")
plots_314x312_avg <- base_kin_analysis(Residual_data_avg_outliars_rm_314x312, geno_matrix, cross_list, title = "314x312 Years Avraged")
plots_star_avg$plot1
plots_star_avg$plot2
plots_314x312_avg <- base_kin_analysis(Residual_data_avg_outliars_rm_314x312, geno_matrix, cross_list, title = "314x312 Years Avraged")
plots_314x312_avg$plot1
plots_314x312_avg$plot2
base_kin_analysis <- function(pheno_data, geno_matrix, cross_list, title) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
pca_result <- prcomp(kinship_matrix)
diag(kinship_matrix) <- NA
kin_heatmap <- pheatmap(kinship_matrix,
cluster_rows = TRUE,
cluster_cols = TRUE,
color = colorRampPalette(c("blue", "white", "red"))(50),
main = paste0("Kinship Matrix Heatmap ", title))
# Perform PCA on the kinship matrix (or SNP matrix if needed)
pca_scores <- pca_result$x  # Principal component scores
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_df <- data.frame(PC1 = pca_scores[, 1], PC2 = pca_scores[, 2])
pca_df <-merge(pca_df, cross_list, by.x = "row.names", by.y = "V1" )
pca_df <- pca_df %>% rename(Cross = V2)
# Create the scatter plot of PC1 vs PC2
kin_pca <- ggplot(pca_df, aes(x = PC1, y = PC2)) +
geom_point(aes(color = Cross), size = 3, alpha = 0.3) +  # Plot the points
geom_text(
data = subset(pca_df, grepl("parent", Cross, ignore.case = TRUE)),  # Filter for "parent"
aes(label = Row.names),
vjust = -1,  # Adjust text position
size = 3,
color = "black"
) +
labs(title = paste0("PCA:", title), x = "PC1", y = "PC2") +
theme_minimal()
return(list(plot1 = kin_heatmap, plot2 = kin_pca))
}
plots_star_avg <- base_kin_analysis(Residual_data_avg_outliars_rm, geno_matrix, cross_list, title = "Star Cross Years Avraged")
plots_star_avg$plot2
read.table(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
data_path <- "../../Data/Heritability_Outputs/"
read.table(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
removed_data <- "plot_2023_310_alk"
read.table(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
read.csv(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
read.csv(paste0(data_path, removed_data, "_data_2.csv"), header = TRUE)
number_heri <- read.csv(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
indviduals_removed <- read.csv(paste0(data_path, removed_data, "_data_2.csv"), header = TRUE)
cbind(number_heri, indviduals_removed)
NHI_data <- cbind(number_heri, indviduals_removed)
head(pca_df)
head(pca_df)
pca_df
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
pheno_data <- Residual_Data_23_outliars_rm_314x312
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
pca_result <- prcomp(kinship_matrix)
pca_scores <- pca_result$x  # Principal component scores
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_df <- data.frame(PC1 = pca_scores[, 1], PC2 = pca_scores[, 2])
pca_df <-merge(pca_df, cross_list, by.x = "row.names", by.y = "V1" )
pca_df <- pca_df %>% rename(Cross = V2)
pca_df
NHI_data
merge(pca_df,NHI_data, by.x = "Row.names", by.y = "x" )
pca_df
NHI_data
NHI_data$x
pca_df$Row.names
pheno_data
pheno_data <- Residual_Data_23_outliars_rm_314x310
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
geno_data
Residual_data_avg_outliars_rm_314x310
pheno_data <- Residual_data_avg_outliars_rm_314x310
pheno_data
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
geno_matrix
vcf_data_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_filtered_2.recode.vcf"
vcf_data <- read.vcfR(vcf_data_loc)
geno_matrix <- extract.gt(vcf_data, element = "GT")
geno_matrix <- t(geno_matrix)
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
common_IDs
pheno_data$ID
Residual_data_avg_outliars_rm$ID
Residual_data_avg_outliars_rm_314x310$ID
pheno_data$ID
pheno_data <- Residual_data_avg_outliars_rm_314x310
pheno_data$ID
rownames(geno_matrix)
rownames(geno_matrix)
vcf_data_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_filtered_2.recode.vcf"
vcf_data <- read.vcfR(vcf_data_loc)
geno_matrix <- extract.gt(vcf_data, element = "GT")
geno_matrix <- t(geno_matrix)
rownames(geno_matrix)
intersect(pheno_data$ID, rownames(geno_matrix))
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
pheno_data[pheno_data$ID %in% common_IDs, ]
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix[common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
geno_data
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
pca_result <- prcomp(kinship_matrix)
diag(kinship_matrix) <- NA
pca_scores <- pca_result$x  # Principal component scores
explained_variance <- pca_result$sdev^2 / sum(pca_result$sdev^2)
pca_df <- data.frame(PC1 = pca_scores[, 1], PC2 = pca_scores[, 2])
pca_df <-merge(pca_df, cross_list, by.x = "row.names", by.y = "V1" )
pca_df <- pca_df %>% rename(Cross = V2)
# PCA of data being removed
data_path <- "../../Data/Heritability_Outputs/"
number_heri <- read.csv(paste0(data_path, removed_data, "_data_1.csv"), header = TRUE)
indviduals_removed <- read.csv(paste0(data_path, removed_data, "_data_2.csv"), header = TRUE)
NHI_data <- cbind(number_heri, indviduals_removed)
merge(pca_df,NHI_data, by.x = "Row.names", by.y = "x" )
merge(pca_df,NHI_data, by.x = "Row.names", by.y = "x", all = TRUE )
#Create plot that shows removed individuals
ggplot(pca_df_2, aes(x = PC1, y = PC2)) +
geom_point(aes(color = color), size = 3) + # Color based on N
scale_color_manual(values = c("black", "purple")) + # Set color scheme
geom_text(aes(label = ifelse(!is.na(N), N, "")), vjust = -1, size = 3) + # Add N value above points
labs(title = "PCA Plot", x = "PC1", y = "PC2") +
theme_minimal()
pca_df_2 <- merge(pca_df,NHI_data, by.x = "Row.names", by.y = "x", all = TRUE )
#Create plot that shows removed individuals
ggplot(pca_df_2, aes(x = PC1, y = PC2)) +
geom_point(aes(color = color), size = 3) + # Color based on N
scale_color_manual(values = c("black", "purple")) + # Set color scheme
geom_text(aes(label = ifelse(!is.na(N), N, "")), vjust = -1, size = 3) + # Add N value above points
labs(title = "PCA Plot", x = "PC1", y = "PC2") +
theme_minimal()
pca_df$color <- ifelse(is.na(pca_df$N), "black", "purple")
#Create plot that shows removed individuals
ggplot(pca_df_2, aes(x = PC1, y = PC2)) +
geom_point(aes(color = color), size = 3) + # Color based on N
scale_color_manual(values = c("black", "purple")) + # Set color scheme
geom_text(aes(label = ifelse(!is.na(N), N, "")), vjust = -1, size = 3) + # Add N value above points
labs(title = "PCA Plot", x = "PC1", y = "PC2") +
theme_minimal()
pca_df_2$color <- ifelse(is.na(pca_df$N), "black", "purple")
pca_df_2 <- merge(pca_df,NHI_data, by.x = "Row.names", by.y = "x", all = TRUE )
pca_df_2$color <- ifelse(is.na(pca_df$N), "black", "purple")
pca_df_2$color <- ifelse(is.na(pca_df_2$N), "black", "purple")
#Create plot that shows removed individuals
ggplot(pca_df_2, aes(x = PC1, y = PC2)) +
geom_point(aes(color = color), size = 3) + # Color based on N
scale_color_manual(values = c("black", "purple")) + # Set color scheme
geom_text(aes(label = ifelse(!is.na(N), N, "")), vjust = -1, size = 3) + # Add N value above points
labs(title = "PCA Plot", x = "PC1", y = "PC2") +
theme_minimal()
