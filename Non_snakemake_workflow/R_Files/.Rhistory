main = "Wieghted MLM on Delta CT", cex = 1, col = c("blue", "red","darkgrey","purple"))
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", cex = 1, col = c("blue", "red","darkgrey","purple"))
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 2, nrow = 2),
nrow = 1
)
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Weighted MLM on Alkaloids", cex = 1, col = c("blue", "red","darkgrey","purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Weighted MLM on Alkaloids", cex = 1, col = c("blue", "red","darkgrey","purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT", cex = 1, col = c("blue", "red","darkgrey","purple"))
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", cex = 1, col = c("blue", "red","darkgrey","purple"))
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 2, nrow = 2),
nrow = 1
)
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 2, nrow = 2))
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 2),
nrow = 1
)
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 2),
nrow = 2
)
grid.arrange(
arrangeGrob(Alkaloid, Delta_OG, Delta_Adj, ncol = 3),
nrow = 1
)
class(Delta_OG)
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", cex = 1, col = c("blue", "red","darkgrey","purple"))
class(Delta_Adj)
library(patchwork)
# Combine the plots in a grid
combined_plot <- Alkaloid + Delta_OG + Delta_Adj +
plot_layout(ncol = 3, nrow = 1)
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Weighted MLM on Alkaloids", cex = 1, col = c("blue", "red","darkgrey","purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Weighted MLM on Alkaloids", cex = 1, col = c("blue", "red","darkgrey","purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT", cex = 1, col = c("blue", "red","darkgrey","purple"))
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", cex = 1, col = c("blue", "red","darkgrey","purple"))
Delta_Adj
class(Delta_Adj)
view(Delta_Adj)
# Combine the plots in a grid
combined_plot <- Alkaloid + Delta_OG + Delta_Adj +
plot_layout(ncol = 3, nrow = 1)
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", cex = 1, col = c("blue", "red","darkgrey","purple"))
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
view(Delta_Adj)
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker", ylim = c(0, 5),
main = "Wieghted MLM on Delta CT Efficiency Adjusted", col = c("blue", "red","darkgrey","purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Alkaloids",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Wieghted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
# Combine the plots in a grid
combined_plot <- Alkaloid + Delta_OG + Delta_Adj +
plot_layout(ncol = 3, nrow = 1)
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Wieghted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Wieghted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Wieghted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Wieghted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
library(qqman)
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Alkaloids",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT Adj ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
typeof(Delta_Adj)
class(Delta_Adj)
### Manhattan Plot of all 2024 data DRT filtered Delta Alkaloids ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Alkaloids",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT Adj ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_Weighted_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "Weighted MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta Alkaloids ****MLM wieghted*****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "ng.g", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Alkaloid <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "MLM on Alkaloids",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT OG ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_OG", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_OG <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "MLM on Delta CT",
col = c("blue", "red", "darkgrey", "purple"))
### Manhattan Plot of all 2024 data DRT filtered Delta CT Adj ****MLM wieghted****
MLM_DRT_Filters_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/MLM_DRT_FIlters.txt"
MLM_DRT_Filters <- read.table(MLM_DRT_Filters_loc, header = TRUE, sep = '\t')
MLM_DRT_Filters$Chr<-gsub("SCAFFOLD_","",as.character(MLM_DRT_Filters$Chr))
MLM_DRT_Filters$Chr<- as.numeric(MLM_DRT_Filters$Chr)
MLM_DRT_Filters <- MLM_DRT_Filters[MLM_DRT_Filters$Trait == "Delta_CT_adj", ]
MLM_DRT_Filters <- MLM_DRT_Filters[-c(1), ]
Delta_Adj <- manhattan(MLM_DRT_Filters, chr = "Chr", bp = "Pos", p = "p", snp = "Marker",
ylim = c(0, 5), main = "MLM on Delta CT Efficiency Adjusted",
col = c("blue", "red", "darkgrey", "purple"))
phenotype_Data <- read.table(file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt')
phenotype_Data
phenotype_Data <- read.table(file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt', header = TRUE)
phenotype_Data
head(merged_2024)
################################################################################
###### Making graphs to explore the pehnotypic data
################################################################################
tassel_2024_data <- read.table(file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/tassel_2024_data.txt', sep = '\t', header = TRUE)
parents_2024 <- all_Data_2024[, c("Treatment", "Mother", "Father")]
parents_2024 <- parents_2024 %>% rename(ID = Treatment)
merged_2024 <- merge(tassel_2024_data, parents_2024, by = "ID")
merged_2024$Parent_Combination <- apply(merged_2024[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = " x "))
head(merged_2024)
################################################################################
###### Making graphs to explore the pehnotypic data
################################################################################
tassel_2024_data <- read.table(file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/tassel_2024_data.txt', sep = '\t', header = TRUE)
parents_2024 <- all_Data_2024[, c("Treatment", "Mother", "Father")]
################################################################################
## Combining 2023 and 2024 data
################################################################################
# The two data sets you need are all_Data_2024 and phenotype_Data_2023
phenotype_Data <- read.table("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt", header = TRUE)
phenotype_Data$Delta_CT[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "314" & phenotype_Data$Data_Set != "315x320"), ]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Data_Set == "315x320"),]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Extraction_Date == "03/16/23"),]
all_Data_2024 <- read.csv("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv", header = TRUE)
head(all_Data_2024)
head(phenotype_Data)
# Delta_CT is actually the adjusted value
phenotype_Data <- phenotype_Data %>%
rename(Delta_CT_adj = Delta_CT)
all_Data_2024 <- all_Data_2024 %>%
rename(ID = Treatment)
# Get only 2024 data ready for tassel (preliminary analysis)
colnames(all_Data_2024)
tassel_2024_data <- all_Data_2024[, c("ID", "Delta_CT_adj", "Delta_CT_OG", "ng.g")]
write.table(tassel_2024_data, file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/tassel_2024_data.txt', sep = '\t', row.names=FALSE)
colnames(phenotype_Data) <- ifelse(colnames(phenotype_Data) == "ID", "ID", paste0(colnames(phenotype_Data), "_2023"))
colnames(all_Data_2024) <- ifelse(colnames(all_Data_2024) == "ID", "ID", paste0(colnames(all_Data_2024), "_2024"))
################################################################################
###### Making graphs to explore the pehnotypic data
################################################################################
tassel_2024_data <- read.table(file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/tassel_2024_data.txt', sep = '\t', header = TRUE)
parents_2024 <- all_Data_2024[, c("Treatment", "Mother", "Father")]
parents_2024 <- parents_2024 %>% rename(ID = Treatment)
merged_2024 <- merge(tassel_2024_data, parents_2024, by = "ID")
merged_2024$Parent_Combination <- apply(merged_2024[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = " x "))
head(merged_2024)
colnames(phenotype_Data) <- ifelse(colnames(phenotype_Data) == "ID", "ID", paste0(colnames(phenotype_Data), "_2023"))
colnames(all_Data_2024) <- ifelse(colnames(all_Data_2024) == "ID", "ID", paste0(colnames(all_Data_2024), "_2024"))
head(phenotype_Data)
phenotype_Data <- read.table("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt", header = TRUE)
phenotype_Data$Delta_CT[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "314" & phenotype_Data$Data_Set != "315x320"), ]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Data_Set == "315x320"),]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Extraction_Date == "03/16/23"),]
all_Data_2024 <- read.csv("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv", header = TRUE)
# Delta_CT is actually the adjusted value
phenotype_Data <- phenotype_Data %>%
rename(Delta_CT_adj = Delta_CT)
all_Data_2024 <- all_Data_2024 %>%
rename(ID = Treatment)
# Get only 2024 data ready for tassel (preliminary analysis)
colnames(all_Data_2024)
tassel_2024_data <- all_Data_2024[, c("ID", "Delta_CT_adj", "Delta_CT_OG", "ng.g")]
write.table(tassel_2024_data, file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/tassel_2024_data.txt', sep = '\t', row.names=FALSE)
# Get all data ready for Blup analysis
# Data must be 1 column per factor, we only use the new vcf file, make a column for year of sampple
# Rename 2023 data to have 2023 in the name
# Rename 2024 data to have 2024 in the name
# Subsett data to just phenotypes
colnames(phenotype_Data) <- ifelse(colnames(phenotype_Data) == "ID", "ID", paste0(colnames(phenotype_Data), "_2023"))
colnames(all_Data_2024) <- ifelse(colnames(all_Data_2024) == "ID", "ID", paste0(colnames(all_Data_2024), "_2024"))
allpehnotype_data_export_23
phenotype_Data
all_Data_2024
head(all_Data_2024)
#Making combined 2023 2024 phenotype data to export
allpehnotype_data_export_23 <- suubset(phenotype_Data, select = c(ID,Delta_CT_adj_2023,Delta_CT_OG_2023,ng.g_2023))
allpehnotype_data_export_24 <- suubset(all_Data_2024, select = c(ID,Delta_CT_adj_2024,Delta_CT_OG_2024,ng.g_2024))
#Making combined 2023 2024 phenotype data to export
allpehnotype_data_export_23 <- subset(phenotype_Data, select = c(ID,Delta_CT_adj_2023,Delta_CT_OG_2023,ng.g_2023))
allpehnotype_data_export_24 <- subset(all_Data_2024, select = c(ID,Delta_CT_adj_2024,Delta_CT_OG_2024,ng.g_2024))
merge(allpehnotype_data_export_23,allpehnotype_data_export_24, by = ID)
merge(allpehnotype_data_export_23,allpehnotype_data_export_24, by = "ID")
phenotypes23_24 <- merge(allpehnotype_data_export_23,allpehnotype_data_export_24, by = "ID")
head(phenotypes23_24)
#Making combined 2023 2024 phenotype data to export
allpehnotype_data_export_23 <- subset(phenotype_Data, select = c(ID,Delta_CT_adj_2023,Delta_CT_OG_2023,ng.g_2023))
allpehnotype_data_export_24 <- subset(all_Data_2024, select = c(ID,Delta_CT_adj_2024,Delta_CT_OG_2024,ng.g_2024))
phenotypes23_24 <- merge(allpehnotype_data_export_23,allpehnotype_data_export_24, by = "ID")
phenotypes23_24$Delta_CT_adj_avg <- (phenotypes23_24$Delta_CT_adj_2023 + phenotypes23_24$Delta_CT_adj_2024) / 2
phenotypes23_24$Delta_CT_OG_avg <- (phenotypes23_24$Delta_CT_OG_2023 + phenotypes23_24$Delta_CT_OG_2024) / 2
phenotypes23_24$ng.g_avg <- (phenotypes23_24$ng.g_2023 + phenotypes23_24$ng.g_2024) / 2
head(phenotypes23_24)
View(phenotypes23_24)
write.table(phenotypes23_24, file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Phenotypes_23_24', sep = '\t', row.names=FALSE)
write.table(phenotypes23_24, file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Phenotypes_23_24.txt', sep = '\t', row.names=FALSE)
average_columns <- function(data, columns) {
# Apply the logic across the specified columns
data$Average <- apply(data[, columns], 1, function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(mean(x, na.rm = TRUE))
}
})
return(data)
}
average_columns(phenotypes23_24, c("Delta_CT_adj_2023", "Delta_CT_adj_2024"))
head(phenotypes23_24)
################################################################################
## Combining 2023 and 2024 data
################################################################################
# The two data sets you need are all_Data_2024 and phenotype_Data_2023
phenotype_Data <- read.table("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/All_Data_Filtered/phenotype_data.txt", header = TRUE)
phenotype_Data$Delta_CT[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "306-3-8"] <- NA
phenotype_Data$Delta_CT_OG[phenotype_Data$ID == "320-5-26"] <- NA
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "314" & phenotype_Data$Data_Set != "315x320"), ]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Data_Set == "315x320"),]
phenotype_Data <- phenotype_Data[!(phenotype_Data$ID == "315-1-8" & phenotype_Data$Extraction_Date == "03/16/23"),]
all_Data_2024 <- read.csv("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv", header = TRUE)
# Delta_CT is actually the adjusted value
phenotype_Data <- phenotype_Data %>%
rename(Delta_CT_adj = Delta_CT)
all_Data_2024 <- all_Data_2024 %>%
rename(ID = Treatment)
# Get only 2024 data ready for tassel (preliminary analysis)
colnames(all_Data_2024)
tassel_2024_data <- all_Data_2024[, c("ID", "Delta_CT_adj", "Delta_CT_OG", "ng.g")]
colnames(phenotype_Data) <- ifelse(colnames(phenotype_Data) == "ID", "ID", paste0(colnames(phenotype_Data), "_2023"))
colnames(all_Data_2024) <- ifelse(colnames(all_Data_2024) == "ID", "ID", paste0(colnames(all_Data_2024), "_2024"))
#Making combined 2023 2024 phenotype data to export
allpehnotype_data_export_23 <- subset(phenotype_Data, select = c(ID,Delta_CT_adj_2023,Delta_CT_OG_2023,ng.g_2023))
allpehnotype_data_export_24 <- subset(all_Data_2024, select = c(ID,Delta_CT_adj_2024,Delta_CT_OG_2024,ng.g_2024))
phenotypes23_24 <- merge(allpehnotype_data_export_23,allpehnotype_data_export_24, by = "ID")
head(phenotypes23_24)
average_columns(phenotypes23_24, c("Delta_CT_adj_2023", "Delta_CT_adj_2024"))
average_columns <- function(data, columns, new_column_name) {
# Apply the logic across the specified columns
data[[new_column_name]] <- apply(data[, columns], 1, function(x) {
if (all(is.na(x))) {
return(NA)
} else {
return(mean(x, na.rm = TRUE))
}
})
return(data)
}
average_columns(phenotypes23_24, c("Delta_CT_adj_2023", "Delta_CT_adj_2024"),"Delta_CT_adj_avg")
phenotypes23_24 <- average_columns(phenotypes23_24, c("Delta_CT_adj_2023", "Delta_CT_adj_2024"),"Delta_CT_adj_avg")
head(phenotypes23_24)
phenotypes23_24 <- average_columns(phenotypes23_24, c("ng.g_2023", "ng.g_2024"),"ng.g_avg")
phenotypes23_24
head(phenotypes23_24)
phenotypes23_24 <- average_columns(phenotypes23_24, c("Delta_CT_OG_2023", "Delta_CT_OG_2024"),"Delta_CT_OG_avg")
head(phenotypes23_24)
pheotype_avraged <- subset(phenotypes23_24, select = c("ID", "Delta_CT_adj_avg", "Delta_CT_OG_avg", "ng.g_avg"))
pheotype_avraged
write.table(pheotype_avraged, file = '/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Phenotypes_avg.txt', sep = '\t', row.names=FALSE)
View(pheotype_avraged)
# Remove out liars
remove_outliers <- function(df, threshold = 4) {
# Loop through each column (except the ID column) and remove outliers
for (col in colnames(df)[-1]) {  # Assuming the first column is ID
# Calculate mean and standard deviation
column_mean <- mean(df[[col]], na.rm = TRUE)
column_sd <- sd(df[[col]], na.rm = TRUE)
# Define upper and lower limits
upper_limit <- column_mean + (threshold * column_sd)
lower_limit <- column_mean - (threshold * column_sd)
# Replace outliers with NA
df[[col]] <- ifelse(df[[col]] < lower_limit | df[[col]] > upper_limit, NA, df[[col]])
}
return(df)
}
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 4)
nrow(phenotype_avaraged_2)
nrow(phenotype_avaraged)
nrow(pheotype_avraged)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
nrow(pheotype_avraged)
nrow(pheotype_avraged_2)
nrow(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 2)
nrow(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 1)
nrow(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 0)
nrow(phenotype_avaraged_2)
View(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 4)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 4)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
# Remove out liars
remove_outliers <- function(df, threshold = 4) {
# Loop through each column (except the ID column)
for (col in colnames(df)[-1]) {  # Exclude the first column (ID)
# Calculate mean and standard deviation
column_mean <- mean(df[[col]], na.rm = TRUE)
column_sd <- sd(df[[col]], na.rm = TRUE)
# Define upper and lower limits
upper_limit <- column_mean + (threshold * column_sd)
lower_limit <- column_mean - (threshold * column_sd)
# Replace outliers with NA
df[[col]] <- ifelse(df[[col]] < lower_limit | df[[col]] > upper_limit, NA, df[[col]])
}
return(df)
}
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
# Remove out liars
remove_outliers <- function(df, threshold = 4) {
# Loop through each column (except the ID column)
for (col in colnames(df)[-1]) {  # Exclude the first column (ID)
# Calculate mean and standard deviation for each column
column_mean <- mean(df[[col]], na.rm = TRUE)
column_sd <- sd(df[[col]], na.rm = TRUE)
# Define upper and lower limits
upper_limit <- column_mean + (threshold * column_sd)
lower_limit <- column_mean - (threshold * column_sd)
# Replace only outliers with NA, keep others
df[[col]] <- ifelse(df[[col]] < lower_limit | df[[col]] > upper_limit, NA, df[[col]])
}
return(df)
}
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
View(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 1)
View(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 4)
View(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 3)
View(phenotype_avaraged_2)
phenotype_avaraged_2 <- remove_outliers(pheotype_avraged, threshold = 2.5)
View(phenotype_avaraged_2)
