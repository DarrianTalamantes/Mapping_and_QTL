df_subset <- df %>%
filter(str_detect(ColumnName, "301"))
df_subset <- subset(parent_alkaloid,
select=c(v4 = 301))
df_subset <- subset(parent_alkaloid,
select=c(V4 = 301))
df_subset <- subset(parent_alkaloid, Replicates == "301", select = c(Replicates, V5))
View(df_subset)
df_subset <- subset(parent_alkaloid, V4 == "301", select = c(Replicates, ,V4, V5))
df_subset <- subset(parent_alkaloid, V4 == "301", select = c(Replicates, V4, V5))
aov(V5 ~ Replicates, data = df_subset)
anova_model <- aov(V5 ~ Replicates, data = df_subset)
anova_summary <- summary(anova_model)
anova_summary
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replicates)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.2)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replicates)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replicates)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
df_subset <- subset(parent_alkaloid, V4 == "320", select = c(Replicates, V4, V5))
anova_model <- aov(V5 ~ Replicates, data = df_subset)
anova_summary <- summary(anova_model) # f stat is The ratio of between-group variance to within-group variance
anova_summary
anova_summary$
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replicates)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
anova_summary[F value]
anova_summary["F vlaue"
]
anova_summary
create_anova_table <-function(parent){
df_subset <- subset(parent_alkaloid, V4 == parent, select = c(Replicates, V4, V5))
anova_model <- aov(V5 ~ Replicates, data = df_subset)
anova_summary <- summary(anova_model) # f stat is The ratio of between-group variance to within-group variance
f_value <- anova_summary[[1]]["group", "F value"]
p_value <- anova_summary[[1]]["group", "Pr(>F)"]
result_table <- data.frame(
Value = parent,
F_value = f_value,
P_value = p_value
)
return(result_table)
}
parent_list <- unique(parent_alkaloid$V4)
parent_list
anova_summary
# Loading in data
parent_alkaloid_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Alkaloids_parent_testing.csv"
### Visualize the best crosses
parent_alkaloid <- read.csv(parent_alkaloid_loc, header = FALSE, strip.white=TRUE)
# Loading in data
parent_alkaloid_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Alkaloids_parent_testing.csv"
### Visualize the best crosses
parent_alkaloid <- read.csv(parent_alkaloid_loc, header = FALSE, strip.white=TRUE)
# Loading in data
parent_alkaloid_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Alkaloids_parent_testing.csv"
### Visualize the best crosses
parent_alkaloid <- read.csv(parent_alkaloid_loc, header = FALSE, strip.white=TRUE)
View(parent_alkaloid)
# Loading in data
parent_alkaloid_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/Alkaloids_parent_testing.csv"
### Visualize the best crosses
parent_alkaloid <- read.csv(parent_alkaloid_loc, header = FALSE, strip.white=TRUE)
parent_alkaloid <- parent_alkaloid %>% rename(Replication_Status = V6)
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# cleaning up the data
################################################################################
parent_alkaloid$V4 <- as.character(parent_alkaloid$V4)
parent_alkaloid <- parent_alkaloid %>% rename(Replicates = V2)
parent_alkaloid <- parent_alkaloid %>% rename(Replication_Status = V6)
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.2)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, fill = Replication_Status)) +
scale_fill_manual(values = c("plum","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("plum","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("plum","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("violet","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_minimal()
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("violet","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_bw() +
theme(
axis.text.x = element_text(size = 14),  # Adjust x-axis text size
axis.text.y = element_text(size = 14)   # Adjust y-axis text size
)
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("violet","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_bw() +
theme(
axis.text.x = element_text(size = 14),  # Adjust x-axis text size
axis.text.y = element_text(size = 14),   # Adjust y-axis text size
axis.title.x = element_text(size = 16),
axis.title.x = element_text(size = 16),
plot.title = element_text(hjust = 0.5)
)
################################################################################
# Making Graphs
################################################################################
ggplot(parent_alkaloid, aes(x = V4, y = V5, color = Replication_Status)) +
scale_color_manual(values = c("violet","navy","seagreen","goldenrod", "black")) +
geom_point(size = 4, alpha = .6, position = position_jitter(width = 0.1)) +  # Use geom_point for scatter plot
labs(title = "Alkaloid Levels in Parent Replicates",
x = "Parents",
y = "ng/g ergot alkaloids") +
theme_bw() +
theme(
axis.text.x = element_text(size = 14),  # Adjust x-axis text size
axis.text.y = element_text(size = 14),   # Adjust y-axis text size
axis.title.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
plot.title = element_text(hjust = 0.5)
)
################################################
# Doing PCA's
################################################
#Step1 rename Treatment to ID
phenotypes_2024 <- phenotypes_2024 %>% rename(ID = Treatment)
# Import libraries
library(tidyverse)
library(vcfR)
library(factoextra)
# Loading in the data
phenotypes_2024_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv"
phenotypes_2024 <- read.csv(phenotypes_2024_loc, header = TRUE, strip.white=TRUE)
vcf_314x312 <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x312_filtered.recode.vcf")
vcf_314x310 <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x310_filtered.recode.vcf")
################################################
# Doing PCA's
################################################
#Step1 rename Treatment to ID
phenotypes_2024 <- phenotypes_2024 %>% rename(ID = Treatment)
phenotypes_2024$ID <- gsub("-", "_", phenotypes_2024$ID)
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_314x312, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes_2024)
phenotypes_2024$ID <- gsub("-", "_", phenotypes_2024$ID)
phenotypes_2024$cross <- apply(phenotypes_2024[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = "x"))
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_314x310 <- phenotypes_2024 %>%
filter(ID %in% genotype_ids)
# Ensure there are no extra phenotypes without corresponding genotype IDs
common_ids <- intersect(phenotypes_314x310$ID, rownames(genotype_df))
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[common_ids, ]
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
phenotypes_filtered
phenotypes_filtered$ID
nrow(phenotypes_filtered$ID)
count(phenotypes_filtered$ID)
nrow(phentypes_filtered$ID)
nrow(phenotypes_filtered$ID)
nrow(phenotypes_filtered)
genotype_df_filtered
ncol(genotype_df_filtered)
nrow(genotype_df_filtered)
nrow(phenotypes_filtered)
nrow(common_ids)
ncol(common_ids)
count(common_ids)
length(common_ids)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_314x310$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[common_ids, ]
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
rownames(genotype_df_filtered)
nrow(genotype_df_filtered)
nrow(phenotypes_filtered)
length(common_ids)
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
nrow(phenotypes_filtered)
nrow(genotype_df)
nrow(phenotypes_2024)
phenotypes_314x310 <- phenotypes_2024 %>%
filter(ID %in% genotype_ids)
nrow(phenotypes_314x310)
rownames(phenotypes_314x310)
phenotypes_314x310$ID
nrow(unique(phenotypes_314x310))
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_314x310$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
nrow(genotype_df_filtered)
nrow(phenotypes_filtered)
nrow(phenotypes_314x310)
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_314x310 <- phenotypes_2024 %>%
filter(ID %in% genotype_ids)
phenotypes_314x310 <- nrow(unique(phenotypes_314x310))
nrow(phenotypes_314x310)
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_314x310 <- phenotypes_2024 %>%
filter(ID %in% genotype_ids)
phenotypes_314x310 <- unique(phenotypes_314x310)
nrow(phenotypes_314x310)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_314x310$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_314x310[phenotypes_314x310$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
$ID <- gsub("-", "_", phenotypes$ID)
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
$ID <- gsub("-", "_", phenotypes$ID)
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
$ID <- gsub("-", "_", phenotypes$ID)
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = "x"))
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = "x"))
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
PCA_314x310
PCA_314x312 <- PCA_plotter(vcf_314x312, phenotypes_2024)
PCA_314x312
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
# Import libraries
library(tidyverse)
library(vcfR)
library(factoextra)
# Loading in the data
phenotypes_2024_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv"
phenotypes_2024 <- read.csv(phenotypes_2024_loc, header = TRUE, strip.white=TRUE)
vcf_314x312_filtered <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x312_filtered.recode.vcf")
vcf_314x310_filtered <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x310_filtered.recode.vcf")
mcr50_filtered <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/MCR50_Extra_filtered")
mcr50_filtered <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/MCR50_Extra_filtered.recode.vcf")
vcf_314x312 <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x312.vcf")
vcf_314x310 <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/all_snps_314x310.vcf")
mcr50 <- read.vcfR("/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/VCF/Tall.fescue.MCR50.snps.vcf")
