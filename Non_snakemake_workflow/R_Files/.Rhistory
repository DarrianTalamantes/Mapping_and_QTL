#   data <- data.frame(N = N_list, H = H_list)
#   H_plot <- ggplot(data, aes(x = N, y = H)) +
#     geom_point(color = "blue", size = 3) +  # Add points
#     geom_line(color = "red") +             # Add a line connecting the points
#     labs(title = "N vs Heritability",
#          x = "N",
#          y = "Heritability") +
#     theme_bw()
#
#   return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
#
# }
# Remove the furthest point from the mean
cat("Heritability difference is ",heritability_dif," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
heritability_old <- results$H[1]      # Update old heritability
removals <- removals + 1
}
# Add removed individuals to the results
# Graphing the final product
data <- data.frame(N = N_list, H = H_list)
H_plot <- ggplot(data, aes(x = N, y = H)) +
geom_point(color = "blue", size = 3) +  # Add points
geom_line(color = "red") +             # Add a line connecting the points
labs(title = "N vs Heritability",
x = "N",
y = "Heritability") +
theme_bw()
return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
}
Residual_Data_24_outliars_rm_314x310
###### Getting Heritabilities function ######
find_heritability <- function(pheno_data, geno_matrix, trait) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
# Summarize model results
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
cat(model$monitor)
# Extract variance components for heritability calculation
var_ID <- varcomp_summary$VarComp[1]  # Genetic variance
var_residual <- varcomp_summary$VarComp[2]  # Residual variance
# Calculate heritability
heritability <- var_ID / (var_ID + var_residual)
# Return heritability estimate
heritability <- round(heritability, 4)
resultstable <- data.table(
H = heritability,
GeneticVar = var_ID,
ResidualVar = var_residual,
N = model_summary$groups[1]
)
return(resultstable)
}
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65, Hmin = .03) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability >= Hmin && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
cat("Heritability could not get into acceptable range, returning last results table\n")
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
graph_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 14, Hdif = .04) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
heritability_old = 100
N_list <- c()
H_list <- c()
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
heritability_dif <- abs(heritability - heritability_old)
# Append the current N and H values
N_list <- c(N_list, nrow(pheno_data))
H_list <- c(H_list, heritability)
cat("######################## \n")
cat("N_list new value ", N_list, "\n")
cat("H_list new value ", H_list, "\n")
# if (heritability_dif <= Hdif && heritability != 0) {
#   cat("Heritability difference is ",heritability_dif," which is acceptable. Returning results.\n")
#   # Add removed individuals to the results
#   results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
#
#   # Remove and calculate 2 more before finishing.
#   cat("Removing one more before finishing \n")
#   mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
#   abs_diff <- abs(pheno_data[[trait]] - mean_trait)
#   furthest_index <- which.max(abs_diff)
#   cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
#   removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
#   pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
#   heritability_old <- results$H[1]
#   removals <- removals + 1
#   results <- find_heritability(pheno_data, geno_matrix, trait)
#   heritability <- results$H[1]  # Extract heritability
#   heritability_dif <- abs(heritability - heritability_old)
#   # Append the current N and H values
#   N_list <- c(N_list, nrow(pheno_data))
#   H_list <- c(H_list, heritability)
#
#   # Graphing the final product
#   data <- data.frame(N = N_list, H = H_list)
#   H_plot <- ggplot(data, aes(x = N, y = H)) +
#     geom_point(color = "blue", size = 3) +  # Add points
#     geom_line(color = "red") +             # Add a line connecting the points
#     labs(title = "N vs Heritability",
#          x = "N",
#          y = "Heritability") +
#     theme_bw()
#
#   return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
#
# }
# Remove the furthest point from the mean
cat("Heritability difference is ",heritability_dif," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
heritability_old <- results$H[1]      # Update old heritability
removals <- removals + 1
}
# Add removed individuals to the results
# Graphing the final product
data <- data.frame(N = N_list, H = H_list)
H_plot <- ggplot(data, aes(x = N, y = H)) +
geom_point(color = "blue", size = 3) +  # Add points
geom_line(color = "red") +             # Add a line connecting the points
labs(title = "N vs Heritability",
x = "N",
y = "Heritability") +
theme_bw()
return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
}
plot_2024_310_alk <- graph_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res",nrow(Residual_Data_24_outliars_rm_314x310)/2) ## This one is all 0's
###### Getting Heritabilities function ######
find_heritability <- function(pheno_data, geno_matrix, trait) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
# Summarize model results
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
cat("###### \n check for convergance ######")
cat("\n", model$monitor)
# Extract variance components for heritability calculation
var_ID <- varcomp_summary$VarComp[1]  # Genetic variance
var_residual <- varcomp_summary$VarComp[2]  # Residual variance
# Calculate heritability
heritability <- var_ID / (var_ID + var_residual)
# Return heritability estimate
heritability <- round(heritability, 4)
resultstable <- data.table(
H = heritability,
GeneticVar = var_ID,
ResidualVar = var_residual,
N = model_summary$groups[1]
)
return(resultstable)
}
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65, Hmin = .03) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability >= Hmin && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
cat("Heritability could not get into acceptable range, returning last results table\n")
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
graph_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 14, Hdif = .04) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
heritability_old = 100
N_list <- c()
H_list <- c()
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
heritability_dif <- abs(heritability - heritability_old)
# Append the current N and H values
N_list <- c(N_list, nrow(pheno_data))
H_list <- c(H_list, heritability)
cat("\n ######################## \n")
cat("N_list new value ", N_list, "\n")
cat("H_list new value ", H_list, "\n")
# if (heritability_dif <= Hdif && heritability != 0) {
#   cat("Heritability difference is ",heritability_dif," which is acceptable. Returning results.\n")
#   # Add removed individuals to the results
#   results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
#
#   # Remove and calculate 2 more before finishing.
#   cat("Removing one more before finishing \n")
#   mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
#   abs_diff <- abs(pheno_data[[trait]] - mean_trait)
#   furthest_index <- which.max(abs_diff)
#   cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
#   removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
#   pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
#   heritability_old <- results$H[1]
#   removals <- removals + 1
#   results <- find_heritability(pheno_data, geno_matrix, trait)
#   heritability <- results$H[1]  # Extract heritability
#   heritability_dif <- abs(heritability - heritability_old)
#   # Append the current N and H values
#   N_list <- c(N_list, nrow(pheno_data))
#   H_list <- c(H_list, heritability)
#
#   # Graphing the final product
#   data <- data.frame(N = N_list, H = H_list)
#   H_plot <- ggplot(data, aes(x = N, y = H)) +
#     geom_point(color = "blue", size = 3) +  # Add points
#     geom_line(color = "red") +             # Add a line connecting the points
#     labs(title = "N vs Heritability",
#          x = "N",
#          y = "Heritability") +
#     theme_bw()
#
#   return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
#
# }
# Remove the furthest point from the mean
cat("Heritability difference is ",heritability_dif," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
heritability_old <- results$H[1]      # Update old heritability
removals <- removals + 1
}
# Add removed individuals to the results
# Graphing the final product
data <- data.frame(N = N_list, H = H_list)
H_plot <- ggplot(data, aes(x = N, y = H)) +
geom_point(color = "blue", size = 3) +  # Add points
geom_line(color = "red") +             # Add a line connecting the points
labs(title = "N vs Heritability",
x = "N",
y = "Heritability") +
theme_bw()
return(list(graph = H_plot, Hdata = data, removed = removed_individuals))
}
plot_2024_310_alk <- graph_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res",nrow(Residual_Data_24_outliars_rm_314x310)/2) ## This one is all 0's
# Ensure both datasets have the same IDs
common_IDs <- intersect(Residual_Data_24_outliars_rm_314x310$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- Residual_Data_24_outliars_rm_314x310[Residual_Data_24_outliars_rm_314x310$ID %in% common_IDs, ]
geno_matrix2 <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix2) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix2)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(Alkaloids_Res, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
pheno_data
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste("Alkaloids_Res", "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
model
model$convergence
model$monitor
plot(model)
model$convergence
model$varcomp
summary(model)
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
varcomp_summary
###### Getting Heritabilities function ######
find_heritability <- function(pheno_data, geno_matrix, trait) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
# Summarize model results
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
cat("\n ###### check for convergance ######\n")
if (!model$convergance) {
print("Model did not converge.")
} else {
print("Model converged successfully.")
}
# Extract variance components for heritability calculation
var_ID <- varcomp_summary$VarComp[1]  # Genetic variance
var_residual <- varcomp_summary$VarComp[2]  # Residual variance
# Calculate heritability
heritability <- var_ID / (var_ID + var_residual)
# Return heritability estimate
heritability <- round(heritability, 4)
resultstable <- data.table(
H = heritability,
GeneticVar = var_ID,
ResidualVar = var_residual,
N = model_summary$groups[1]
)
return(resultstable)
}
######################
# Exploring the stats of data sets that needed to remove more individuals
######################
# Explrong data sets that have lots of 0's
plot_2024_310_alk <- graph_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res",nrow(Residual_Data_24_outliars_rm_314x310)/2) ## This one is all 0's
!model$convergance
model$convergance
model$convergence
model$convergence
if (model$convergence) {
print("Model converged successfully.")
} else {
print("Model failed to converge.")
}
###### Getting Heritabilities function ######
find_heritability <- function(pheno_data, geno_matrix, trait) {
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_data$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_data[pheno_data$ID %in% common_IDs, ]
geno_matrix <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
# Summarize model results
model_summary <- summary(model)
varcomp_summary <- model_summary$varcomp
cat("\n ###### check for convergance ######\n")
if (model$convergence) {
print("Model converged successfully.")
} else {
print("Model failed to converge.")
}
# Extract variance components for heritability calculation
var_ID <- varcomp_summary$VarComp[1]  # Genetic variance
var_residual <- varcomp_summary$VarComp[2]  # Residual variance
# Calculate heritability
heritability <- var_ID / (var_ID + var_residual)
# Return heritability estimate
heritability <- round(heritability, 4)
resultstable <- data.table(
H = heritability,
GeneticVar = var_ID,
ResidualVar = var_residual,
N = model_summary$groups[1]
)
return(resultstable)
}
######################
# Exploring the stats of data sets that needed to remove more individuals
######################
# Explrong data sets that have lots of 0's
plot_2024_310_alk <- graph_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res",nrow(Residual_Data_24_outliars_rm_314x310)/2) ## This one is all 0's
plot_2023_310_ct <-graph_heritability(Residual_Data_23_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res",nrow(Residual_Data_23_outliars_rm_314x310)/2)
pheno_input <- Residual_Data_23_outliars_rm_314x310
trait <- "Delta_CT_adj_Res"
# Ensure both datasets have the same IDs
common_IDs <- intersect(pheno_input$ID, rownames(geno_matrix))
# Subset data to include only common IDs
pheno_data <- pheno_input[pheno_input$ID %in% common_IDs, ]
geno_matrix2 <- geno_matrix[common_IDs, ]
# Check if row names match
if (!all(rownames(geno_matrix2) == pheno_data$ID)) {
stop("Row names of geno_data do not match the ID in pheno_data.")
}
# Convert geno_matrix to data frame, and then convert genotypes
geno_data <- as.data.frame(geno_matrix2)
geno_data <- geno_data %>% mutate_all(convert_genotypes)
# Convert geno_data back to matrix for kinship matrix calculation
geno_data <- as.matrix(geno_data)
# Create kinship matrix using Gmatrix function
kinship_matrix <- Gmatrix(SNPmatrix = geno_data, method = "VanRaden")
# Ensure the data is in correct format (pheno_data should have necessary columns)
pheno_data$ID <- as.character(pheno_data$ID)
# Example mixed model for heritability (adjust trait to be a column name)
model <- mmer(fixed = as.formula(paste(trait, "~ 1")),
random = ~ vsr(ID, Gu = kinship_matrix),
rcov = ~ units,
data = pheno_data)
model$convergence
