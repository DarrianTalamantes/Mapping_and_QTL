filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(is.na(x) | x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = "PCA of Individuals Colored by Cross", x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
PCA_314x310
PCA_314x312 <- PCA_plotter(vcf_314x312, phenotypes_2024)
PCA_314x312
PCA_mcr50 <- PCA_plotter(mcr50, phenotypes_2024)
PCA_mcr50
PCA_314x310_filtered <- PCA_plotter(PCA_314x310_filtered, phenotypes_2024)
PCA_314x310_filtered <- PCA_plotter(vcf_314x310_filtered, phenotypes_2024)
PCA_314x310
PCA_314x312 <- PCA_plotter(vcf_314x312_filtered, phenotypes_2024)
PCA_314x312
PCA_mcr50_filtered <- PCA_plotter(PCA_mcr50_filtered, phenotypes_2024)
PCA_mcr50_filtered <- PCA_plotter(mcr50_filtered, phenotypes_2024)
PCA_mcr50
PCA_mcr50_filtered
PCA_314x312_filtered
PCA_314x312_filtered <- PCA_plotter(vcf_314x312_filtered, phenotypes_2024)
PCA_314x312_filtered
PCA_314x310_filtered <- PCA_plotter(vcf_314x310_filtered, phenotypes_2024)
PCA_314x310_filtered
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024)
PCA_314x310
PCA_314x312 <- PCA_plotter(vcf_314x312, phenotypes_2024)
PCA_314x312
PCA_mcr50 <- PCA_plotter(mcr50, phenotypes_2024)
PCA_mcr50
PCA_314x310_filtered <- PCA_plotter(vcf_314x310_filtered, phenotypes_2024)
PCA_314x310_filtered
PCA_314x312_filtered <- PCA_plotter(vcf_314x312_filtered, phenotypes_2024)
PCA_314x312_filtered
PCA_mcr50_filtered <- PCA_plotter(mcr50_filtered, phenotypes_2024)
PCA_mcr50_filtered
library(patchwork)
(PCA_mcr50 + PCA_314x312 + PCA_314x310) / (PCA_mcr50_filtered + PCA_314x312_filtered + PCA_314x310_filtered)
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3, top = textGrob("Column Labels", gp = gpar(fontsize = 14))),
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
nrow = 2,
left = textGrob("Row Labels", rot = 90, gp = gpar(fontsize = 14))
)
library(gridExtra)
library(grid)
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3, top = textGrob("Column Labels", gp = gpar(fontsize = 14))),
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
nrow = 2,
left = textGrob("Row Labels", rot = 90, gp = gpar(fontsize = 14))
)
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes, title){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(is.na(x) | x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
labs(title = title, x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024, "PCA 314x310")
PCA_314x310
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes, title){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(is.na(x) | x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
ggtitle(title) +
labs(x = "Principal Component 1", y = "Principal Component 2") +
theme_minimal() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024, "PCA 314x310")
PCA_314x310
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes, title){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(is.na(x) | x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
ggtitle(title) +
labs(x = "Principal Component 1", y = "Principal Component 2") +
theme_bw() +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024, "PCA 314x310")
PCA_314x310
# Creating a PCA function
PCA_plotter <- function(vcf_file, phenotypes, title){
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_file, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Assuming you have a phenotype data frame with IDs and crosses
colnames(phenotypes)
phenotypes$ID <- gsub("-", "_", phenotypes$ID)
phenotypes$cross <- apply(phenotypes[, c("Mother", "Father")], 1, function(x) {
if (all(is.na(x) | x == "")) {
return("Parent")
} else {
return(paste(sort(x), collapse = "x"))
}
})
# Step 5: Set row names to match IDs from the phenotype data
genotype_ids <- rownames(genotype_df)
phenotypes_unique <- phenotypes %>%
filter(ID %in% genotype_ids)
phenotypes_unique <- unique(phenotypes_unique)
# Ensure there are no extra phenotypes without corresponding genotype IDs
unique_genotype_ids <- unique(rownames(genotype_df))
unique_phenotype_ids <- unique(phenotypes_unique$ID)
common_ids <- intersect(unique_phenotype_ids, unique_genotype_ids)
# Filter both datasets to only include matching IDs
genotype_df_filtered <- genotype_df[rownames(genotype_df) %in% common_ids, ]
phenotypes_filtered <- phenotypes_unique[phenotypes_unique$ID %in% common_ids, ]
rownames(genotype_df_filtered) <- phenotypes_filtered$ID
# Step 6: Perform PCA on the transposed genotype data (individuals in rows)
constant_columns <- sapply(genotype_df, function(x) length(unique(x)) == 1)
genotype_df_filtered <- genotype_df[, !constant_columns]
ncol(genotype_df_filtered)
ncol(genotype_df)
pca_result <- prcomp(genotype_df_filtered, center = TRUE, scale. = TRUE)
# Step 7: Prepare PCA results for visualization
pca_data <- as.data.frame(pca_result$x)
# Add the 'cross' information to the PCA data
pca_data$cross <- phenotypes$cross[match(rownames(pca_data), phenotypes$ID)]
# Step 8: Create PCA plot
pca_plot <- ggplot(pca_data, aes(x = PC1, y = PC2, color = cross)) +
geom_point(size = 3) +
ggtitle(title) +
labs(x = "Principal Component 1", y = "Principal Component 2") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5)) +
scale_color_brewer(palette = "Set1")
return(pca_plot)
}
PCA_314x310 <- PCA_plotter(vcf_314x310, phenotypes_2024, "PCA 314x310")
PCA_314x310
PCA_314x312 <- PCA_plotter(vcf_314x312, phenotypes_2024, "PCA 314x312")
PCA_314x312
PCA_mcr50 <- PCA_plotter(mcr50, phenotypes_2024, "PCA MCR50")
PCA_mcr50
PCA_314x310_filtered <- PCA_plotter(vcf_314x310_filtered, phenotypes_2024, "PCA 314x310 Filtered")
PCA_314x310_filtered
PCA_314x312_filtered <- PCA_plotter(vcf_314x312_filtered, phenotypes_2024, "PCA 314x312 Filtered")
PCA_314x312_filtered
PCA_mcr50_filtered <- PCA_plotter(mcr50_filtered, phenotypes_2024, "PCA MCR50 Filtered")
PCA_mcr50_filtered
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3, top = textGrob("Column Labels", gp = gpar(fontsize = 14))),
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
nrow = 2,
left = textGrob("Row Labels", rot = 90, gp = gpar(fontsize = 14))
)
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3, top = textGrob("Column Labels", gp = gpar(fontsize = 14))),
left = textGrob("Row Labels", rot = 90, gp = gpar(fontsize = 14))
)
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3, ),
left = textGrob("MCR50 No Filteres", rot = 90, gp = gpar(fontsize = 14))
)
grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3),
left = textGrob("MCR50 No Filteres", rot = 90, gp = gpar(fontsize = 14))
)
grid.arrange(
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
nrow = 2,
left = textGrob("Darrian Filters", rot = 90, gp = gpar(fontsize = 14))
)
grid.arrange(
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
left = textGrob("Darrian Filters", rot = 90, gp = gpar(fontsize = 14))
)
all_no_filters <- grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3),
left = textGrob("MCR50 No Filteres", rot = 90, gp = gpar(fontsize = 14))
)
all_filtered <- grid.arrange(
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
left = textGrob("Darrian Filters", rot = 90, gp = gpar(fontsize = 14))
)
ggarrange(all_no_filters, all_filtered, nrow = 2)
grid.arrange(
arrangeGrob(all_no_filters, all_filtered, ncol = 1),
nrow = 2
)
grid.arrange(
arrangeGrob(all_no_filters, all_filtered, ncol = 1),
nrow = 1
)
all_no_filters <- grid.arrange(
arrangeGrob(PCA_mcr50, PCA_314x312, PCA_314x310, ncol = 3),
left = textGrob("MCR50 No Filteres", rot = 90, gp = gpar(fontsize = 20))
)
all_filtered <- grid.arrange(
arrangeGrob(PCA_mcr50_filtered, PCA_314x312_filtered, PCA_314x310_filtered, ncol = 3),
left = textGrob("Darrian Filters", rot = 90, gp = gpar(fontsize = 20))
)
grid.arrange(
arrangeGrob(all_no_filters, all_filtered, ncol = 1),
nrow = 1
)
View(phenotypes_2024)
View(phenotypes_2024)
View(phenotypes_2024)
View(phenotypes_2024)
phenotypes_2024$cross <- apply(phenotypes_2024[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = "x"))
# Loading in the data
phenotypes_2024_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Phenotype_Data/2024_Data/Final_2024_phenotype_data.csv"
phenotypes_2024 <- read.csv(phenotypes_2024_loc, header = TRUE, strip.white=TRUE)
################################################
# Doing PCA's
################################################
#Treatment to ID
phenotypes_2024 <- phenotypes_2024 %>% rename(ID = Treatment)
phenotypes_2024$ID <- gsub("-", "_", phenotypes_2024$ID)
phenotypes_2024$cross <- apply(phenotypes_2024[, c("Mother", "Father")], 1, function(x) paste(sort(x), collapse = "x"))
################################################################################
# Graphs from tassel data
################################################################################
PCA_MCR50_Tassel_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/PCA_MCR50.txt"
PCA_MCR50_Tassel <- read.csv(PCA_MCR50_Tassel_loc, header = TRUE, strip.white=TRUE)
View(PCA_MCR50_Tassel)
PCA_MCR50_Tassel <- read.csv(PCA_MCR50_Tassel_loc, header = FALSE, strip.white=TRUE, skip = 3)
PCA_MCR50_Tassel <- read.csv(PCA_MCR50_Tassel_loc, header = FALSE, strip.white=TRUE, skip = 2)
colnames(data) <- data[1, ]
################################################################################
# Graphs from tassel data
################################################################################
PCA_MCR50_Tassel_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/PCA_MCR50.txt"
PCA_MCR50_Tassel <- read.csv(PCA_MCR50_Tassel_loc, header = FALSE, strip.white=TRUE, skip = 2)
PCA_MCR50_Tassel <- PCA_MCR50_Tassel[, -((ncol(PCA_MCR50_Tassel)-5):ncol(PCA_MCR50_Tassel))]
colnames(PCA_MCR50_Tassel) <- PCA_MCR50_Tassel[1, ]
PCA_MCR50_Tassel <- PCA_MCR50_Tassel[-1, ]
################################################################################
# Graphs from tassel data
################################################################################
PCA_MCR50_Tassel_loc <- "/home/darrian/Desktop/UGA/Wallace_Lab/Mapping_and_QTL/Data/Tassel_Outputs/2024_only/PCA_MCR50.txt"
PCA_MCR50_Tassel <- read.csv(PCA_MCR50_Tassel_loc, header = FALSE, strip.white=TRUE, skip = 2)
PCA_MCR50_Tassel <- PCA_MCR50_Tassel[, -((ncol(PCA_MCR50_Tassel)-4):ncol(PCA_MCR50_Tassel))]
colnames(PCA_MCR50_Tassel) <- PCA_MCR50_Tassel[1, ]
PCA_MCR50_Tassel <- PCA_MCR50_Tassel[-1, ]
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
scale_y_continuous(breaks = seq(-5, 5, by = .5)) +
scale_y_continuous(breaks = seq(-5, 5, by = .5)) +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
scale_y_continuous(breaks = seq(-5, 5, by = .5)) +
scale_x_continuous(breaks = seq(-5, 5, by = .5)) +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
theme_minimal()
PCA_MCR50_Tassel$PC1 <- as.numeric(as.character(PCA_MCR50_Tassel$PC1))
PCA_MCR50_Tassel$PC2 <- as.numeric(as.character(PCA_MCR50_Tassel$PC2))
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "PCA of Numerical Data Colored by Category") +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "Tassel MCR50 PCA not filtered") +
theme_minimal()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "Tassel MCR50 PCA not filtered") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "Tassel MCR50 PCA not filtered") +
theme(plot.title = element_text(hjust = 0.5)) +
theme_bw()
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "Tassel MCR50 PCA not filtered") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(PCA_MCR50_Tassel, aes(x = PC1, y = PC2, color = Cross)) +
geom_point() +
labs(title = "Tassel MCR50 PCA not filtered") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
View(PCA_314x312)
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_314x312, as.numeric = TRUE)
genotype_matrix[is.na(genotype_matrix)] <- 0  # Handle missing data
# Step 3: Transpose the genotype matrix so that individuals are in rows
genotype_df <- as.data.frame(t(genotype_matrix))
View(genotype_df)
library(vegan)
# Step 2: Extract the genotype matrix (individuals as columns)
genotype_matrix <- extract.gt(vcf_314x310_filtered, as.numeric = TRUE)
vegdist(genotype_matrix, method = "euclidean")
vegdist(genotype_matrix, method = "bray")
vegdist(genotype_matrix, method = "euclidean")
genotype_matrix_clean <- na.omit(genotype_matrix)
genotype_matrix_clean
nrow(genotype_matrix_clean)
ncol(genotype_matrix_clean)
genotype_matrix_clean <- genotype_matrix[, colSums(is.na(genotype_matrix)) == 0]
nrow(genotype_matrix_clean)
ncol(genotype_matrix_clean)
vegdist(genotype_matrix, method = "euclidean")
vegdist(genotype_matrix, method = "euclidean", na.rm = TRUE)
