pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
return(results)
}
H_2024_310_ct
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5) {
# Initialize a counter for removed points
removals <- 0
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is not zero, return the results
if (heritability != 0 && heritability >= .90) {
cat("Heritability is non-zero. Returning results.\n")
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is zero. Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
stats_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5) {
# Initialize a counter for removed points
removals <- 0
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is not zero, return the results
if (heritability != 0 && heritability <= .90) {
cat("Heritability is non-zero. Returning results.\n")
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is zero. Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
H_2024_310_ct <- stats_2024_310_ct$H[1]
H_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5) {
# Initialize a counter for removed points
removals <- 0
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is not zero, return the results
if (heritability != 0 && heritability <= .90) {
cat("Heritability is acceptable. Returning results.\n")
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is ",heritability, " Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
return(results)
}
clear
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
# Initialize a counter for removed points
removals <- 0
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is not zero, return the results
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is acceptable. Returning results.\n")
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is out of range at ",heritability, " Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
stats_2024_310_ct
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", .60)
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
H_2024_310_ct <- stats_2024_310_ct$H[1]
stats_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
# Initialize a counter for removed points
removals <- 0
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is not zero, return the results
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is acceptable. Returning results.\n")
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is out of range at ", heritability, ". Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index],
"with value:", pheno_data[[trait]][furthest_index], "\n")
# Store the removed individual's ID
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])
# Remove the individual from the dataset
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still zero after max_removals
cat("Reached maximum removals with heritability still at ", heritability)
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = 0.65) {
# Initialize a counter for removed points
removals <- 0
# Initialize a list to store removed individuals
removed_individuals <- list()
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is acceptable, return the results and removed individuals
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is acceptable. Returning results.\n")
results$RemovedIndividuals <- removed_individuals  # Add removed individuals to results
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is out of range at ", heritability, ". Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index],
"with value:", pheno_data[[trait]][furthest_index], "\n")
# Store the removed individual's ID
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])
# Remove the individual from the dataset
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still out of range after max_removals
cat("Reached maximum removals with heritability still at ", heritability, ".\n")
# Add the removed individuals to the final results
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = 0.65) {
# Initialize a counter for removed points
removals <- 0
# Initialize a list to store removed individuals
removed_individuals <- list()
# Run a loop to refine heritability
while (removals < max_removals) {
# Run find_heritability
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
# If heritability is acceptable, return the results and removed individuals
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is acceptable. Returning results.\n")
results$RemovedIndividuals <- removed_individuals  # Add removed individuals to results
return(results)
}
# Remove the data point furthest from the mean
cat("Heritability is out of range at ", heritability, ". Removing the furthest point from the mean...\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index],
"with value:", pheno_data[[trait]][furthest_index], "\n")
# Store the removed individual's ID
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])
# Remove the individual from the dataset
pheno_data <- pheno_data[-furthest_index, ]
# Increment the removal counter
removals <- removals + 1
}
# If we reach here, heritability is still out of range after max_removals
cat("Reached maximum removals with heritability still at ", heritability, ".\n")
# Add the removed individuals to the final results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
typeof(stats_2024_310_ct)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is acceptable. Returning results.\n")
return(results)
}
# Remove the furthest point from the mean
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- removed_individuals
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results_df <- as.data.frame(results)  # Convert the list to a data frame
results$RemovedIndividuals <- removed_individuals
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
results_df <- as.data.frame(results)  # Convert the list to a data frame
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .65)
stats_2024_310_ct
stats_2024_310_ct$RemovedIndividuals
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results_df <- as.data.frame(results)  # Convert the list to a data frame
results_df$RemovedIndividuals <- removed_individuals
return(results_df)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- removed_individuals
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
results$RemovedIndividuals <- removed_individuals
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
stats_2024_310_ct <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res", 5, .60)
stats_2024_310_ct
heritability
stats_2024_312_alk
stats_2024_312_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res")
stats_2024_312_alk
stats_2024_312_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res", 10, .60)
refine_heritability <- function(pheno_data, geno_matrix, trait, max_removals = 5, Hcap = .65) {
removals <- 0
removed_individuals <- character()  # Initialize an empty vector to store removed IDs
while (removals < max_removals) {
results <- find_heritability(pheno_data, geno_matrix, trait)
heritability <- results$H[1]  # Extract heritability
if (heritability != 0 && heritability <= Hcap) {
cat("Heritability is ",heritability," which is acceptable. Returning results.\n")
# Add removed individuals to the results
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
# Remove the furthest point from the mean
cat("Heritability is ",heritability," which is unacceptable\n")
mean_trait <- mean(pheno_data[[trait]], na.rm = TRUE)
abs_diff <- abs(pheno_data[[trait]] - mean_trait)
furthest_index <- which.max(abs_diff)
cat("Removing index:", pheno_data$ID[furthest_index], "with value:", pheno_data[[trait]][furthest_index], "\n")
removed_individuals <- c(removed_individuals, pheno_data$ID[furthest_index])  # Store removed individual
pheno_data <- pheno_data[-furthest_index, ]  # Remove the individual
removals <- removals + 1
}
# Add removed individuals to the results
cat("Heritability could not get into acceptable range, returning last results table\n")
results$RemovedIndividuals <- paste(removed_individuals, collapse = ", ")
return(results)
}
stats_2024_312_alk
stats_2024_312_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res", 15, .60)
stats_2024_312_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res", 20, .60)
H_2024_312_alk
stats_2024_312_alk
H_2024_312_alk <- stats_2024_312_alk$H[1]
View(Residual_Data_24_outliars_rm_314x312)
View(stats_2023_310_alk)
View(stats_2023_310_ct)
View(stats_2023_312_alk)
View(stats_2023_312_ct)
View(stats_2023_star_alk)
View(stats_2023_star_alk)
View(stats_2023_star_ct)
View(stats_2024_310_alk)
View(stats_2024_310_ct)
stats_2024_310_ct
stats_2024_312_alk
View(stats_2024_310_ct)
View(stats_2024_312_alk)
View(stats_2024_312_ct)
View(stats_2024_star_alk)
View(stats_2024_star_ct)
View(stats_avg_310_alk)
View(stats_avg_310_ct)
View(stats_avg_312_alk)
View(stats_avg_312_ct)
View(stats_avg_star_alk)
View(stats_avg_star_ct)
View(stats_2023_310_alk)
View(stats_2023_310_ct)
View(stats_2023_312_alk)
View(stats_2023_312_ct)
View(stats_2023_star_alk)
View(stats_2023_star_ct)
View(stats_2024_310_alk)
View(stats_2024_310_ct)
# Just the 2023 heritabilities
stats_2023_310_alk <- refine_heritability(Residual_Data_23_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res")
H_2023_310_alk <- stats_2023_310_alk$H[1]
stats_2023_312_alk <- refine_heritability(Residual_Data_23_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res")
H_2023_312_alk <- stats_2023_312_alk$H[1]
stats_2023_star_alk <- refine_heritability(Residual_Data_23_outliars_rm, geno_matrix, trait = "Alkaloids_Res")
H_2023_star_alk <- stats_2023_star_alk$H[1]
stats_2023_310_ct <- refine_heritability(Residual_Data_23_outliars_rm_314x310, geno_matrix, trait = "Delta_CT_adj_Res")
H_2023_310_ct <- stats_2023_310_ct$H[1]
stats_2023_312_ct <- refine_heritability(Residual_Data_23_outliars_rm_314x312, geno_matrix, trait = "Delta_CT_adj_Res")
H_2023_312_ct <- stats_2023_312_ct$H[1]
stats_2023_star_ct <- refine_heritability(Residual_Data_23_outliars_rm, geno_matrix, trait = "Delta_CT_adj_Res")
H_2023_star_ct <- stats_2023_star_ct$H[1]
# Just the 2024 Heritabilities
stats_2024_310_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x310, geno_matrix, trait = "Alkaloids_Res")
H_2024_310_alk <- stats_2024_310_alk$H[1]
stats_2024_312_alk <- refine_heritability(Residual_Data_24_outliars_rm_314x312, geno_matrix, trait = "Alkaloids_Res", 20, .60)
