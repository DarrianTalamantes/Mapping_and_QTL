# Author: Darrian Talamantes
# Affiliation: University of Georgia
# How to Run: 
# 1: ensure the rule all has the target output
# 2: input this code in the terminal
# snakemake --cores 2 --use-conda

# to run use snakemake --use-conda --cores 2

# This file will hold all the rules to 

# 1 align my data to the genome
# 2 find snps
# 3 create a genetic map


# Reads were quality checked before this and none have to be removed



# =========================================================================================================
#     Load config file
# =========================================================================================================
configfile: "config.yaml"

# Config importing paths to directories 
progpath = config["paths"]["progeny"]
parentpath = config["paths"]["parents"]
mapped_reads = config["paths"]["mapped_reads"]
mapped_reads_parents = config["paths"]["mapped_reads_parents"]
vcfs = config["paths"]["vcfs"]
vcfs_parents = config["paths"]["vcfs_parents"]

#Pointing to list files (have to made before running)
progeny_key = config["lists"]["progeny_key"]
real_prog_names = config["lists"]["real_prog_names"]
bam_list = config["lists"]["bam_list"]

# config importing files
picard_metrics = config["picard"]["metrics"]
genome = config["genome"]



# =================================================================================================
#    Renaming files
# =================================================================================================
# This step is more just for my data because my files are named very poorly and this fixes it.
# I run this before anything so we can easily make lists from the directories. 

import os
import dic_functions
prog_dic = dic_functions.importdic(progeny_key)
for x in real_prog_names:
    if os.path.isfile(progpath + x):
        print()
    else:
        dic_functions.rename_files(prog_dic, progpath)


# =================================================================================================
#   List Variables
# =================================================================================================

# Listing Progeny Files
(FILES,) = glob_wildcards(progpath + "{file}.fastq.gz")
(SAMPLES,) = glob_wildcards(progpath + "{sample}R2.fastq.gz")

# Listing Parent Files
(PARENTF,) = glob_wildcards(parentpath + "{parent_file}.fq.gz")
(PARENTS,) = glob_wildcards(parentpath + "{parent_sample}R2_.fq.gz")

# =================================================================================================
#    Rules
# =================================================================================================

rule all:
    input:
        # multiext(genome, ".amb", ".ann", ".bwt", ".pac", ".sa"),
        # genome + ".fai",
        # For some reason you must 
        expand(mapped_reads_parents + "{parent_sample}dupped.bam", parent_sample=PARENTS)


#Align genome file
rule index_genome:
    params:
        algo=config["bwa"]["index"]
    input:
        genome=config["genome"]
    output:
        idx=multiext("{input}", ".amb", ".ann", ".bwt", ".pac", ".sa"),
    conda:
        "Conda_Envs/BWA.yaml"
    shell:
        "bwa index -a {params.algo} {input}"

# Index the genome for sam tools
rule samtools_index:
    input:
        genome
    output:
        genome + ".fai",
    wrapper:
        "v2.6.0/bio/samtools/faidx"

# include: "rules/01_align_parents.smk"			# step 1 - Aligning, sorting, removing duplicates from parents
# include: "rules/01_align_progeny.smk"		    # step 1 - Aligning, sorting, removing duplicates from progeny
include: "02_snp_call"




    
# conda env export -n BWA > BWA.yaml
# snakemake --dag | dot -Tsvg > dag.svg
