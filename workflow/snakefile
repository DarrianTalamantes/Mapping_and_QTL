# Author: Darrian Talamantes
# Affiliation: University of Georgia
# How to Run: 
# 1: ensure the rule all has the target output
# 2: input this code in the terminal
# snakemake --cores 2 --use-conda

# to run use snakemake --use-conda --cores 2

# This file will hold all the rules to 

# 1 align my data to the genome
# 2 find snps
# 3 create a genetic map


# Reads were quality checked before this and none have to be removed



# =========================================================================================================
#     Load config file
# =========================================================================================================
configfile: "config.yaml"

# Config importing
progpath = config["paths"]["progeny"]
parentpath = config["paths"]["parents"]
mapped_reads = config["paths"]["mapped_reads"]
mapped_reads_parents = config["paths"]["mapped_reads_parents"]
progeny_key = config["lists"]["progeny_key"]
real_prog_names = config["lists"]["real_prog_names"]
picard_metrics = config["picard"]["metrics"]
genome = config["genome"]
vcfs = config["paths"]["vcfs"]
vcfs_parents = config["paths"]["vcfs_parents"]


# =================================================================================================
#    Renaming files
# =================================================================================================
# This step is more just for my data because my files are named very poorly and this fixes it.
# I run this before anything so we can easily make lists from the directories. 

import os
import dic_functions
prog_dic = dic_functions.importdic(progeny_key)
for x in real_prog_names:
    if os.path.isfile(progpath + x):
        print()
    else:
        dic_functions.rename_files(prog_dic, progpath)


# =================================================================================================
#   List Variables
# =================================================================================================

# Listing Progeny Files
(FILES,) = glob_wildcards(progpath + "{file}.fastq.gz")
(SAMPLES,) = glob_wildcards(progpath + "{sample}R2.fastq.gz")

# Listing Parent Files
(PARENTF,) = glob_wildcards(parentpath + "{parent_file}.fq.gz")
(PARENTS,) = glob_wildcards(parentpath + "{parent_sample}R2_.fq.gz")

# =================================================================================================
#    Rules
# =================================================================================================

rule all:
    input:
        expand(mapped_reads_parents + "{parent_sample}dupped.bam", parent_sample=PARENTS),
        expand(mapped_reads + "{sample}dupped.bam", sample=SAMPLES),
        expand(vcfs + "{sample}.bcf", sample=SAMPLES)

#Align genome file
rule index_genome:
    params:
        algo=config["bwa"]["index"]
    input:
        genome=config["genome"]
    output:
        idx=multiext("{input}", ".amb", ".ann", ".bwt", ".pac", ".sa"),
    conda:
        "Conda_Envs/BWA.yaml"
    shell:
        "bwa index -a {params.algo} {input}"
        
# aligns the files to the genome
rule bwa_map_prog:
    input:
        prog1=progpath + "{sample}R1.fastq.gz",
        prog2=progpath + "{sample}R2.fastq.gz",
        genome=config["genome"] 
    output:
        bams=temp(mapped_reads + "{sample}.bam")
    threads:
        2
    conda:
        "Conda_Envs/BWA.yaml"
    shell:
       "bwa mem {input.genome} {input.prog1} {input.prog2} -t {threads} > {output}"

rule bwa_map_parent:
    input:
        parent1=parentpath + "{parent_sample}R1_.fq.gz",
        parent2=parentpath + "{parent_sample}R2_.fq.gz",
        genome=config["genome"]
    output:
        bams2 = temp(mapped_reads_parents + "{parent_sample}.bam")
    threads:
        2
    conda:
        "Conda_Envs/BWA.yaml"
    shell:
       "bwa mem {input.genome} {input.parent1} {input.parent2} -t {threads} > {output}"

# Sorts the alignment file 
rule samtools_sort_prog:
    input:
        bams = mapped_reads + "{sample}.bam"   
    output:
        sorted = temp(mapped_reads + "{sample}sorted.bam")
    log:
        "logs/samtools/{sample}_sorted.log",
    params:
        extra= "-m 2G",
    threads: 8
    wrapper:
        "v2.6.0/bio/samtools/sort"

rule samtools_sort_parent:
    input:
        bams2 = mapped_reads_parents + "{parent_sample}.bam"
    output:
        sorted2 = temp(mapped_reads_parents + "{parent_sample}sorted.bam")
    log:
        "logs/samtools/{parent_sample}_sorted.log"
    params:
        extra= "-m 16G",
    threads: 2
    wrapper:
        "v2.6.0/bio/samtools/sort"

# marks and removes the duplicates with picard
rule markduplicates_prog:
    input:
        bams = mapped_reads + "{sample}sorted.bam"
    output:
        bam = mapped_reads + "{sample}dupped.bam",
        metrics= picard_metrics + "{sample}_metrics.txt"
    log:
        "logs/samtools/{sample}_dupped.log",
    params:
        extra="--REMOVE_DUPLICATES true",
    resources:
        mem_mb=1024,
    wrapper:
        "v2.6.0/bio/picard/markduplicates"

rule markduplicates_parents:
    input:
        bams = mapped_reads_parents + "{parent_sample}sorted.bam"
    output:
        bam = mapped_reads_parents + "{parent_sample}dupped.bam",
        metrics = picard_metrics + "{parent_sample}_metrics.txt"
    log:
        "logs/samtools/{parent_sample}_dupped.log",
    params:
        extra="--REMOVE_DUPLICATES true",
    resources:
        mem_mb=1024,
    wrapper:
        "v2.6.0/bio/picard/markduplicates"

# Index the genome for sam tools
rule samtools_index:
    input:
        genome
    output:
        genome + ".fai",
    wrapper:
        "v2.6.0/bio/samtools/faidx"

# This code works for an individual against the genome but I have to do this for every cross
rule bcftools_mpileup_prog:
    input:
        alignments=mapped_reads + "{sample}dupped.bam",
        ref=genome,
        index=genome + ".fai",
    output:
        pileup= vcfs + "{sample}.bcf",
    params:
        uncompressed_bcf=False,
        extra="--max-depth 100 --min-BQ 10",
    log:
        "logs/bcftools_mpileup/{sample}.log",
    wrapper:
        "v2.6.0/bio/bcftools/mpileup"





#samtools markdup $Inter/${prog}_sorted.bam $Inter/${TrueName}_align_marked_sorted.bam



#     echo "samtools sort $Inter/$prog.bam -o $Inter/${prog}_sorted.bam" >> $Inter/SamSortCommands.sh
#     echo "samtools markdup $Inter/${prog}_sorted.bam $Inter/${TrueName}_align_marked_sorted.bam" >> $Inter/SamDupesCommands.sh
# done
# cat $Inter/SamSortCommands.sh | parallel --jobs 20 --progress
# cat $Inter/SamDupesCommands.sh | parallel --jobs 20 --progress

    
# conda env export -n BWA > BWA.yaml
# snakemake --dag | dot -Tsvg > dag.svg
